//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1022
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DocumentManage.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    public enum ActiveStatus : short
    {
        
        [Display(Name="使用中")]
        Active = 0,
        
        [Display(Name="已停用")]
        InActive = 1,
        
        [Display(Name="已过期")]
        Expired = 2,
        
        [Display(Name="已删除")]
        Deleted = 3,
    }
    
    /// <summary>
    /// “ArchiveWorkflow”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class ArchiveWorkflow : ComplexObject
    {
        
        private int _currentStep;
        
        private List<WorkflowFileInfo> _files;
        
        private int _flowId;
        
        private string _flowTitle;
        
        private int _flowType;
        
        private int _folderId;
        
        private int _identity;
        
        private bool _isRevise;
        
        private AuditStatus _status;
        
        private string _submitDescription;
        
        private DateTime _submitTime;
        
        private int _submitUserId;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCurrentStepChanging(int value);
        partial void OnCurrentStepChanged();
        partial void OnFilesChanging(List<WorkflowFileInfo> value);
        partial void OnFilesChanged();
        partial void OnFlowIdChanging(int value);
        partial void OnFlowIdChanged();
        partial void OnFlowTitleChanging(string value);
        partial void OnFlowTitleChanged();
        partial void OnFlowTypeChanging(int value);
        partial void OnFlowTypeChanged();
        partial void OnFolderIdChanging(int value);
        partial void OnFolderIdChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnIsReviseChanging(bool value);
        partial void OnIsReviseChanged();
        partial void OnStatusChanging(AuditStatus value);
        partial void OnStatusChanged();
        partial void OnSubmitDescriptionChanging(string value);
        partial void OnSubmitDescriptionChanged();
        partial void OnSubmitTimeChanging(DateTime value);
        partial void OnSubmitTimeChanged();
        partial void OnSubmitUserIdChanging(int value);
        partial void OnSubmitUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="ArchiveWorkflow"/> 类的新实例。
        /// </summary>
        public ArchiveWorkflow()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CurrentStep”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="CurrentStep", Order=7)]
        public int CurrentStep
        {
            get
            {
                return this._currentStep;
            }
            set
            {
                if ((this._currentStep != value))
                {
                    this.OnCurrentStepChanging(value);
                    this.RaiseDataMemberChanging("CurrentStep");
                    this.ValidateProperty("CurrentStep", value);
                    this._currentStep = value;
                    this.RaiseDataMemberChanged("CurrentStep");
                    this.OnCurrentStepChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Files”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="文件列表", Order=9)]
        public List<WorkflowFileInfo> Files
        {
            get
            {
                return this._files;
            }
            set
            {
                if ((this._files != value))
                {
                    this.OnFilesChanging(value);
                    this.RaiseDataMemberChanging("Files");
                    this.ValidateProperty("Files", value);
                    this._files = value;
                    this.RaiseDataMemberChanged("Files");
                    this.OnFilesChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FlowId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="FlowId", Order=1)]
        public int FlowId
        {
            get
            {
                return this._flowId;
            }
            set
            {
                if ((this._flowId != value))
                {
                    this.OnFlowIdChanging(value);
                    this.RaiseDataMemberChanging("FlowId");
                    this.ValidateProperty("FlowId", value);
                    this._flowId = value;
                    this.RaiseDataMemberChanged("FlowId");
                    this.OnFlowIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FlowTitle”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="流程标题", Order=3)]
        public string FlowTitle
        {
            get
            {
                return this._flowTitle;
            }
            set
            {
                if ((this._flowTitle != value))
                {
                    this.OnFlowTitleChanging(value);
                    this.RaiseDataMemberChanging("FlowTitle");
                    this.ValidateProperty("FlowTitle", value);
                    this._flowTitle = value;
                    this.RaiseDataMemberChanged("FlowTitle");
                    this.OnFlowTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FlowType”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="FlowType", Order=2)]
        public int FlowType
        {
            get
            {
                return this._flowType;
            }
            set
            {
                if ((this._flowType != value))
                {
                    this.OnFlowTypeChanging(value);
                    this.RaiseDataMemberChanging("FlowType");
                    this.ValidateProperty("FlowType", value);
                    this._flowType = value;
                    this.RaiseDataMemberChanged("FlowType");
                    this.OnFlowTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FolderId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="FolderId", Order=1)]
        public int FolderId
        {
            get
            {
                return this._folderId;
            }
            set
            {
                if ((this._folderId != value))
                {
                    this.OnFolderIdChanging(value);
                    this.RaiseDataMemberChanging("FolderId");
                    this.ValidateProperty("FolderId", value);
                    this._folderId = value;
                    this.RaiseDataMemberChanged("FolderId");
                    this.OnFolderIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="Identity", Order=0)]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“IsRevise”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="修订流程", Order=2)]
        public bool IsRevise
        {
            get
            {
                return this._isRevise;
            }
            set
            {
                if ((this._isRevise != value))
                {
                    this.OnIsReviseChanging(value);
                    this.RaiseDataMemberChanging("IsRevise");
                    this.ValidateProperty("IsRevise", value);
                    this._isRevise = value;
                    this.RaiseDataMemberChanged("IsRevise");
                    this.OnIsReviseChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Status”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="当前状态", Order=8)]
        public AuditStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SubmitDescription”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="描述内容", Order=6)]
        public string SubmitDescription
        {
            get
            {
                return this._submitDescription;
            }
            set
            {
                if ((this._submitDescription != value))
                {
                    this.OnSubmitDescriptionChanging(value);
                    this.RaiseDataMemberChanging("SubmitDescription");
                    this.ValidateProperty("SubmitDescription", value);
                    this._submitDescription = value;
                    this.RaiseDataMemberChanged("SubmitDescription");
                    this.OnSubmitDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SubmitTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="提交时间", Order=5)]
        public DateTime SubmitTime
        {
            get
            {
                return this._submitTime;
            }
            set
            {
                if ((this._submitTime != value))
                {
                    this.OnSubmitTimeChanging(value);
                    this.RaiseDataMemberChanging("SubmitTime");
                    this.ValidateProperty("SubmitTime", value);
                    this._submitTime = value;
                    this.RaiseDataMemberChanged("SubmitTime");
                    this.OnSubmitTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SubmitUserId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="提交用户ID", Order=4)]
        public int SubmitUserId
        {
            get
            {
                return this._submitUserId;
            }
            set
            {
                if ((this._submitUserId != value))
                {
                    this.OnSubmitUserIdChanging(value);
                    this.RaiseDataMemberChanging("SubmitUserId");
                    this.ValidateProperty("SubmitUserId", value);
                    this._submitUserId = value;
                    this.RaiseDataMemberChanged("SubmitUserId");
                    this.OnSubmitUserIdChanged();
                }
            }
        }
    }
    
    public enum AuditOperation : short
    {
        
        [Display(Name="提交")]
        Submit = 0,
        
        [Display(Name="审核")]
        Audit = 1,
        
        [Display(Name="退回")]
        Reject = 2,
        
        [Display(Name="驳回")]
        Return = 3,
        
        [Display(Name="会审")]
        JointCheck = 4,
        
        [Display(Name="审批")]
        Final = 5,
    }
    
    public enum AuditStatus : short
    {
        
        [Display(Name="新建")]
        New = 0,
        
        [Display(Name="草稿箱")]
        Draft = 1,
        
        [Display(Name="已提交")]
        Submitted = 2,
        
        [Display(Name="审批中")]
        Auditing = 3,
        
        [Display(Name="已审批")]
        Audited = 4,
        
        [Display(Name="未通过")]
        Rejected = 5,
        
        [Display(Name="已驳回")]
        Returned = 6,
    }
    
    public enum AuditType : short
    {
        
        [Display(Name="特定用户")]
        ConstUser = 0,
        
        [Display(Name="特定部门")]
        ConstOrg = 1,
        
        [Display(Name="组织类型")]
        Organization = 2,
        
        [Display(Name="系统角色")]
        Role = 3,
        
        [Display(Name="多人会审")]
        JointCheckup = 4,
        
        [Display(Name="最终审批")]
        FinalJudgement = 5,
    }
    
    public enum CustomDataType : short
    {
        
        [Display(Name="字符串")]
        String = 0,
        
        [Display(Name="整数")]
        Integer = 1,
        
        [Display(Name="浮点数")]
        Float = 2,
        
        [Display(Name="日期")]
        Date = 3,
        
        [Display(Name="时间")]
        Time = 4,
        
        [Display(Name="日期+时间")]
        DateTime = 5,
    }
    
    /// <summary>
    /// “Document”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class Document : ComplexObject
    {
        
        private byte[] _content;
        
        private int _createdBy;
        
        private DateTime _createTime;
        
        private List<DocumentDesc> _descriptions;
        
        private int _documentId;
        
        private string _fileName;
        
        private string _filePath;
        
        private DocumentType _fileType;
        
        private int _folderId;
        
        private int _identity;
        
        private int _lastUpdatedBy;
        
        private DateTime _lastUpdateTime;
        
        private string _organizationId;
        
        private string _orignalName;
        
        private int _revision;
        
        private DocumentStatus _status;
        
        private Guid _uniqeName;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnContentChanging(byte[] value);
        partial void OnContentChanged();
        partial void OnCreatedByChanging(int value);
        partial void OnCreatedByChanged();
        partial void OnCreateTimeChanging(DateTime value);
        partial void OnCreateTimeChanged();
        partial void OnDescriptionsChanging(List<DocumentDesc> value);
        partial void OnDescriptionsChanged();
        partial void OnDocumentIdChanging(int value);
        partial void OnDocumentIdChanged();
        partial void OnFileNameChanging(string value);
        partial void OnFileNameChanged();
        partial void OnFilePathChanging(string value);
        partial void OnFilePathChanged();
        partial void OnFileTypeChanging(DocumentType value);
        partial void OnFileTypeChanged();
        partial void OnFolderIdChanging(int value);
        partial void OnFolderIdChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnLastUpdatedByChanging(int value);
        partial void OnLastUpdatedByChanged();
        partial void OnLastUpdateTimeChanging(DateTime value);
        partial void OnLastUpdateTimeChanged();
        partial void OnOrganizationIdChanging(string value);
        partial void OnOrganizationIdChanged();
        partial void OnOrignalNameChanging(string value);
        partial void OnOrignalNameChanged();
        partial void OnRevisionChanging(int value);
        partial void OnRevisionChanged();
        partial void OnStatusChanging(DocumentStatus value);
        partial void OnStatusChanged();
        partial void OnUniqeNameChanging(Guid value);
        partial void OnUniqeNameChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="Document"/> 类的新实例。
        /// </summary>
        public Document()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“Content”值。
        /// </summary>
        [DataMember()]
        public byte[] Content
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OnContentChanging(value);
                    this.RaiseDataMemberChanging("Content");
                    this.ValidateProperty("Content", value);
                    this._content = value;
                    this.RaiseDataMemberChanged("Content");
                    this.OnContentChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CreatedBy”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="添加人ID", Order=7)]
        public int CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                if ((this._createdBy != value))
                {
                    this.OnCreatedByChanging(value);
                    this.RaiseDataMemberChanging("CreatedBy");
                    this.ValidateProperty("CreatedBy", value);
                    this._createdBy = value;
                    this.RaiseDataMemberChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CreateTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="添加日期", Order=8)]
        public DateTime CreateTime
        {
            get
            {
                return this._createTime;
            }
            set
            {
                if ((this._createTime != value))
                {
                    this.OnCreateTimeChanging(value);
                    this.RaiseDataMemberChanging("CreateTime");
                    this.ValidateProperty("CreateTime", value);
                    this._createTime = value;
                    this.RaiseDataMemberChanged("CreateTime");
                    this.OnCreateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Descriptions”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<DocumentDesc> Descriptions
        {
            get
            {
                return this._descriptions;
            }
            set
            {
                if ((this._descriptions != value))
                {
                    this.OnDescriptionsChanging(value);
                    this.RaiseDataMemberChanging("Descriptions");
                    this.ValidateProperty("Descriptions", value);
                    this._descriptions = value;
                    this.RaiseDataMemberChanged("Descriptions");
                    this.OnDescriptionsChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DocumentId”值。
        /// </summary>
        [DataMember()]
        public int DocumentId
        {
            get
            {
                return this._documentId;
            }
            set
            {
                if ((this._documentId != value))
                {
                    this.OnDocumentIdChanging(value);
                    this.RaiseDataMemberChanging("DocumentId");
                    this.ValidateProperty("DocumentId", value);
                    this._documentId = value;
                    this.RaiseDataMemberChanged("DocumentId");
                    this.OnDocumentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FileName”值。
        /// </summary>
        [DataMember()]
        public string FileName
        {
            get
            {
                return this._fileName;
            }
            set
            {
                if ((this._fileName != value))
                {
                    this.OnFileNameChanging(value);
                    this.RaiseDataMemberChanging("FileName");
                    this.ValidateProperty("FileName", value);
                    this._fileName = value;
                    this.RaiseDataMemberChanged("FileName");
                    this.OnFileNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FilePath”值。
        /// </summary>
        [DataMember()]
        public string FilePath
        {
            get
            {
                return this._filePath;
            }
            set
            {
                if ((this._filePath != value))
                {
                    this.OnFilePathChanging(value);
                    this.RaiseDataMemberChanging("FilePath");
                    this.ValidateProperty("FilePath", value);
                    this._filePath = value;
                    this.RaiseDataMemberChanged("FilePath");
                    this.OnFilePathChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FileType”值。
        /// </summary>
        [DataMember()]
        public DocumentType FileType
        {
            get
            {
                return this._fileType;
            }
            set
            {
                if ((this._fileType != value))
                {
                    this.OnFileTypeChanging(value);
                    this.RaiseDataMemberChanging("FileType");
                    this.ValidateProperty("FileType", value);
                    this._fileType = value;
                    this.RaiseDataMemberChanged("FileType");
                    this.OnFileTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FolderId”值。
        /// </summary>
        [DataMember()]
        public int FolderId
        {
            get
            {
                return this._folderId;
            }
            set
            {
                if ((this._folderId != value))
                {
                    this.OnFolderIdChanging(value);
                    this.RaiseDataMemberChanging("FolderId");
                    this.ValidateProperty("FolderId", value);
                    this._folderId = value;
                    this.RaiseDataMemberChanged("FolderId");
                    this.OnFolderIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LastUpdatedBy”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="最后更新人ID", Order=9)]
        public int LastUpdatedBy
        {
            get
            {
                return this._lastUpdatedBy;
            }
            set
            {
                if ((this._lastUpdatedBy != value))
                {
                    this.OnLastUpdatedByChanging(value);
                    this.RaiseDataMemberChanging("LastUpdatedBy");
                    this.ValidateProperty("LastUpdatedBy", value);
                    this._lastUpdatedBy = value;
                    this.RaiseDataMemberChanged("LastUpdatedBy");
                    this.OnLastUpdatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LastUpdateTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="最后更新时间", Order=10)]
        public DateTime LastUpdateTime
        {
            get
            {
                return this._lastUpdateTime;
            }
            set
            {
                if ((this._lastUpdateTime != value))
                {
                    this.OnLastUpdateTimeChanging(value);
                    this.RaiseDataMemberChanging("LastUpdateTime");
                    this.ValidateProperty("LastUpdateTime", value);
                    this._lastUpdateTime = value;
                    this.RaiseDataMemberChanged("LastUpdateTime");
                    this.OnLastUpdateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OrganizationId”值。
        /// </summary>
        [DataMember()]
        public string OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OrignalName”值。
        /// </summary>
        [DataMember()]
        public string OrignalName
        {
            get
            {
                return this._orignalName;
            }
            set
            {
                if ((this._orignalName != value))
                {
                    this.OnOrignalNameChanging(value);
                    this.RaiseDataMemberChanging("OrignalName");
                    this.ValidateProperty("OrignalName", value);
                    this._orignalName = value;
                    this.RaiseDataMemberChanged("OrignalName");
                    this.OnOrignalNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Revision”值。
        /// </summary>
        [DataMember()]
        public int Revision
        {
            get
            {
                return this._revision;
            }
            set
            {
                if ((this._revision != value))
                {
                    this.OnRevisionChanging(value);
                    this.RaiseDataMemberChanging("Revision");
                    this.ValidateProperty("Revision", value);
                    this._revision = value;
                    this.RaiseDataMemberChanged("Revision");
                    this.OnRevisionChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Status”值。
        /// </summary>
        [DataMember()]
        public DocumentStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UniqeName”值。
        /// </summary>
        [DataMember()]
        public Guid UniqeName
        {
            get
            {
                return this._uniqeName;
            }
            set
            {
                if ((this._uniqeName != value))
                {
                    this.OnUniqeNameChanging(value);
                    this.RaiseDataMemberChanging("UniqeName");
                    this.ValidateProperty("UniqeName", value);
                    this._uniqeName = value;
                    this.RaiseDataMemberChanged("UniqeName");
                    this.OnUniqeNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// “DocumentDesc”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class DocumentDesc : ComplexObject
    {
        
        private string _description;
        
        private int _documentId;
        
        private string _header;
        
        private int _id;
        
        private int _identity;
        
        private int _templateId;
        
        private FileDescTemplate _templateInfo;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDocumentIdChanging(int value);
        partial void OnDocumentIdChanged();
        partial void OnHeaderChanging(string value);
        partial void OnHeaderChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnTemplateIdChanging(int value);
        partial void OnTemplateIdChanged();
        partial void OnTemplateInfoChanging(FileDescTemplate value);
        partial void OnTemplateInfoChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="DocumentDesc"/> 类的新实例。
        /// </summary>
        public DocumentDesc()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“Description”值。
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DocumentId”值。
        /// </summary>
        [DataMember()]
        public int DocumentId
        {
            get
            {
                return this._documentId;
            }
            set
            {
                if ((this._documentId != value))
                {
                    this.OnDocumentIdChanging(value);
                    this.RaiseDataMemberChanging("DocumentId");
                    this.ValidateProperty("DocumentId", value);
                    this._documentId = value;
                    this.RaiseDataMemberChanged("DocumentId");
                    this.OnDocumentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Header”值。
        /// </summary>
        [DataMember()]
        public string Header
        {
            get
            {
                return this._header;
            }
            set
            {
                if ((this._header != value))
                {
                    this.OnHeaderChanging(value);
                    this.RaiseDataMemberChanging("Header");
                    this.ValidateProperty("Header", value);
                    this._header = value;
                    this.RaiseDataMemberChanged("Header");
                    this.OnHeaderChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Id”值。
        /// </summary>
        [DataMember()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TemplateId”值。
        /// </summary>
        [DataMember()]
        public int TemplateId
        {
            get
            {
                return this._templateId;
            }
            set
            {
                if ((this._templateId != value))
                {
                    this.OnTemplateIdChanging(value);
                    this.RaiseDataMemberChanging("TemplateId");
                    this.ValidateProperty("TemplateId", value);
                    this._templateId = value;
                    this.RaiseDataMemberChanged("TemplateId");
                    this.OnTemplateIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TemplateInfo”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public FileDescTemplate TemplateInfo
        {
            get
            {
                return this._templateInfo;
            }
            set
            {
                if ((this._templateInfo != value))
                {
                    this.OnTemplateInfoChanging(value);
                    this.RaiseDataMemberChanging("TemplateInfo");
                    this.ValidateProperty("TemplateInfo", value);
                    this._templateInfo = value;
                    this.RaiseDataMemberChanged("TemplateInfo");
                    this.OnTemplateInfoChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// “DocumentFolder”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class DocumentFolder : ComplexObject
    {
        
        private List<DocumentFolder> _children;
        
        private int _createdBy;
        
        private DateTime _createTime;
        
        private int _folderId;
        
        private string _fullName;
        
        private int _identity;
        
        private string _name;
        
        private string _organizationId;
        
        private DocumentFolder _parentFolder;
        
        private int _parentId;
        
        private ActiveStatus _status;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnChildrenChanging(List<DocumentFolder> value);
        partial void OnChildrenChanged();
        partial void OnCreatedByChanging(int value);
        partial void OnCreatedByChanged();
        partial void OnCreateTimeChanging(DateTime value);
        partial void OnCreateTimeChanged();
        partial void OnFolderIdChanging(int value);
        partial void OnFolderIdChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOrganizationIdChanging(string value);
        partial void OnOrganizationIdChanged();
        partial void OnParentFolderChanging(DocumentFolder value);
        partial void OnParentFolderChanged();
        partial void OnParentIdChanging(int value);
        partial void OnParentIdChanged();
        partial void OnStatusChanging(ActiveStatus value);
        partial void OnStatusChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="DocumentFolder"/> 类的新实例。
        /// </summary>
        public DocumentFolder()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“Children”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="子文件夹", Order=8)]
        public List<DocumentFolder> Children
        {
            get
            {
                return this._children;
            }
            set
            {
                if ((this._children != value))
                {
                    this.OnChildrenChanging(value);
                    this.RaiseDataMemberChanging("Children");
                    this.ValidateProperty("Children", value);
                    this._children = value;
                    this.RaiseDataMemberChanged("Children");
                    this.OnChildrenChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CreatedBy”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="创建人ID", Order=5)]
        public int CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                if ((this._createdBy != value))
                {
                    this.OnCreatedByChanging(value);
                    this.RaiseDataMemberChanging("CreatedBy");
                    this.ValidateProperty("CreatedBy", value);
                    this._createdBy = value;
                    this.RaiseDataMemberChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CreateTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="创建时间", Order=6)]
        public DateTime CreateTime
        {
            get
            {
                return this._createTime;
            }
            set
            {
                if ((this._createTime != value))
                {
                    this.OnCreateTimeChanging(value);
                    this.RaiseDataMemberChanging("CreateTime");
                    this.ValidateProperty("CreateTime", value);
                    this._createTime = value;
                    this.RaiseDataMemberChanged("CreateTime");
                    this.OnCreateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FolderId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="FolderId", Order=1)]
        public int FolderId
        {
            get
            {
                return this._folderId;
            }
            set
            {
                if ((this._folderId != value))
                {
                    this.OnFolderIdChanging(value);
                    this.RaiseDataMemberChanging("FolderId");
                    this.ValidateProperty("FolderId", value);
                    this._folderId = value;
                    this.RaiseDataMemberChanged("FolderId");
                    this.OnFolderIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FullName”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="完整路径", Order=4)]
        public string FullName
        {
            get
            {
                return this._fullName;
            }
            set
            {
                if ((this._fullName != value))
                {
                    this.OnFullNameChanging(value);
                    this.RaiseDataMemberChanging("FullName");
                    this.ValidateProperty("FullName", value);
                    this._fullName = value;
                    this.RaiseDataMemberChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="Identity", Order=0)]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Name”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="文件夹名", Order=3)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OrganizationId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="组织ID", Order=2)]
        public string OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ParentFolder”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public DocumentFolder ParentFolder
        {
            get
            {
                return this._parentFolder;
            }
            set
            {
                if ((this._parentFolder != value))
                {
                    this.OnParentFolderChanging(value);
                    this.RaiseDataMemberChanging("ParentFolder");
                    this.ValidateProperty("ParentFolder", value);
                    this._parentFolder = value;
                    this.RaiseDataMemberChanged("ParentFolder");
                    this.OnParentFolderChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ParentId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="ParentId", Order=2)]
        public int ParentId
        {
            get
            {
                return this._parentId;
            }
            set
            {
                if ((this._parentId != value))
                {
                    this.OnParentIdChanging(value);
                    this.RaiseDataMemberChanging("ParentId");
                    this.ValidateProperty("ParentId", value);
                    this._parentId = value;
                    this.RaiseDataMemberChanged("ParentId");
                    this.OnParentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Status”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="状态", Order=7)]
        public ActiveStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// “DocumentRelease”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class DocumentRelease : ComplexObject
    {
        
        private Guid _documentId;
        
        private int _folderId;
        
        private int _identity;
        
        private int _releasedBy;
        
        private int _releaseId;
        
        private DateTime _releaseTime;
        
        private DocumentReleaseType _releaseType;
        
        private SystemUser _releaseUser;
        
        private Organization _reviewOrg;
        
        private string _reviewOrgId;
        
        private SystemUser _reviewUser;
        
        private int _reviewUserId;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDocumentIdChanging(Guid value);
        partial void OnDocumentIdChanged();
        partial void OnFolderIdChanging(int value);
        partial void OnFolderIdChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnReleasedByChanging(int value);
        partial void OnReleasedByChanged();
        partial void OnReleaseIdChanging(int value);
        partial void OnReleaseIdChanged();
        partial void OnReleaseTimeChanging(DateTime value);
        partial void OnReleaseTimeChanged();
        partial void OnReleaseTypeChanging(DocumentReleaseType value);
        partial void OnReleaseTypeChanged();
        partial void OnReleaseUserChanging(SystemUser value);
        partial void OnReleaseUserChanged();
        partial void OnReviewOrgChanging(Organization value);
        partial void OnReviewOrgChanged();
        partial void OnReviewOrgIdChanging(string value);
        partial void OnReviewOrgIdChanged();
        partial void OnReviewUserChanging(SystemUser value);
        partial void OnReviewUserChanged();
        partial void OnReviewUserIdChanging(int value);
        partial void OnReviewUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="DocumentRelease"/> 类的新实例。
        /// </summary>
        public DocumentRelease()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“DocumentId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="文档ID", Order=5)]
        public Guid DocumentId
        {
            get
            {
                return this._documentId;
            }
            set
            {
                if ((this._documentId != value))
                {
                    this.OnDocumentIdChanging(value);
                    this.RaiseDataMemberChanging("DocumentId");
                    this.ValidateProperty("DocumentId", value);
                    this._documentId = value;
                    this.RaiseDataMemberChanged("DocumentId");
                    this.OnDocumentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FolderId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="文件夹ID", Order=3)]
        public int FolderId
        {
            get
            {
                return this._folderId;
            }
            set
            {
                if ((this._folderId != value))
                {
                    this.OnFolderIdChanging(value);
                    this.RaiseDataMemberChanging("FolderId");
                    this.ValidateProperty("FolderId", value);
                    this._folderId = value;
                    this.RaiseDataMemberChanged("FolderId");
                    this.OnFolderIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="Identity", Order=0)]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ReleasedBy”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="发布用户ID", Order=12)]
        public int ReleasedBy
        {
            get
            {
                return this._releasedBy;
            }
            set
            {
                if ((this._releasedBy != value))
                {
                    this.OnReleasedByChanging(value);
                    this.RaiseDataMemberChanging("ReleasedBy");
                    this.ValidateProperty("ReleasedBy", value);
                    this._releasedBy = value;
                    this.RaiseDataMemberChanged("ReleasedBy");
                    this.OnReleasedByChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ReleaseId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="ReleaseId", Order=1)]
        public int ReleaseId
        {
            get
            {
                return this._releaseId;
            }
            set
            {
                if ((this._releaseId != value))
                {
                    this.OnReleaseIdChanging(value);
                    this.RaiseDataMemberChanging("ReleaseId");
                    this.ValidateProperty("ReleaseId", value);
                    this._releaseId = value;
                    this.RaiseDataMemberChanged("ReleaseId");
                    this.OnReleaseIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ReleaseTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="发布时间", Order=11)]
        public DateTime ReleaseTime
        {
            get
            {
                return this._releaseTime;
            }
            set
            {
                if ((this._releaseTime != value))
                {
                    this.OnReleaseTimeChanging(value);
                    this.RaiseDataMemberChanging("ReleaseTime");
                    this.ValidateProperty("ReleaseTime", value);
                    this._releaseTime = value;
                    this.RaiseDataMemberChanged("ReleaseTime");
                    this.OnReleaseTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ReleaseType”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="发布类型", Order=2)]
        public DocumentReleaseType ReleaseType
        {
            get
            {
                return this._releaseType;
            }
            set
            {
                if ((this._releaseType != value))
                {
                    this.OnReleaseTypeChanging(value);
                    this.RaiseDataMemberChanging("ReleaseType");
                    this.ValidateProperty("ReleaseType", value);
                    this._releaseType = value;
                    this.RaiseDataMemberChanged("ReleaseType");
                    this.OnReleaseTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ReleaseUser”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="发布用户", Order=13)]
        public SystemUser ReleaseUser
        {
            get
            {
                return this._releaseUser;
            }
            set
            {
                if ((this._releaseUser != value))
                {
                    this.OnReleaseUserChanging(value);
                    this.RaiseDataMemberChanging("ReleaseUser");
                    this.ValidateProperty("ReleaseUser", value);
                    this._releaseUser = value;
                    this.RaiseDataMemberChanged("ReleaseUser");
                    this.OnReleaseUserChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ReviewOrg”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="浏览组织", Order=10)]
        public Organization ReviewOrg
        {
            get
            {
                return this._reviewOrg;
            }
            set
            {
                if ((this._reviewOrg != value))
                {
                    this.OnReviewOrgChanging(value);
                    this.RaiseDataMemberChanging("ReviewOrg");
                    this.ValidateProperty("ReviewOrg", value);
                    this._reviewOrg = value;
                    this.RaiseDataMemberChanged("ReviewOrg");
                    this.OnReviewOrgChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ReviewOrgId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="浏览组织ID", Order=9)]
        public string ReviewOrgId
        {
            get
            {
                return this._reviewOrgId;
            }
            set
            {
                if ((this._reviewOrgId != value))
                {
                    this.OnReviewOrgIdChanging(value);
                    this.RaiseDataMemberChanging("ReviewOrgId");
                    this.ValidateProperty("ReviewOrgId", value);
                    this._reviewOrgId = value;
                    this.RaiseDataMemberChanged("ReviewOrgId");
                    this.OnReviewOrgIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ReviewUser”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="浏览用户", Order=8)]
        public SystemUser ReviewUser
        {
            get
            {
                return this._reviewUser;
            }
            set
            {
                if ((this._reviewUser != value))
                {
                    this.OnReviewUserChanging(value);
                    this.RaiseDataMemberChanging("ReviewUser");
                    this.ValidateProperty("ReviewUser", value);
                    this._reviewUser = value;
                    this.RaiseDataMemberChanged("ReviewUser");
                    this.OnReviewUserChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ReviewUserId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="浏览用户ID", Order=7)]
        public int ReviewUserId
        {
            get
            {
                return this._reviewUserId;
            }
            set
            {
                if ((this._reviewUserId != value))
                {
                    this.OnReviewUserIdChanging(value);
                    this.RaiseDataMemberChanging("ReviewUserId");
                    this.ValidateProperty("ReviewUserId", value);
                    this._reviewUserId = value;
                    this.RaiseDataMemberChanged("ReviewUserId");
                    this.OnReviewUserIdChanged();
                }
            }
        }
    }
    
    public enum DocumentReleaseType : short
    {
        
        [Display(Name="组织")]
        Organization = 0,
        
        [Display(Name="用户")]
        SystemUser = 1,
    }
    
    public enum DocumentStatus : short
    {
        
        Draft = 0,
        
        Pending = 1,
        
        Public = 2,
        
        Hide = 3,
        
        Readonly = 4,
        
        FinalVersion = 5,
        
        Deleted = 6,
    }
    
    public enum DocumentType : short
    {
        
        Unknown = 0,
        
        TXT = 1,
        
        CSV = 2,
        
        XML = 3,
        
        BMP = 4,
        
        JPG = 5,
        
        GIF = 6,
        
        PNG = 7,
        
        DOC = 8,
        
        DOCX = 9,
        
        XLS = 10,
        
        XLSX = 11,
        
        PPT = 12,
        
        PPTX = 13,
        
        PDF = 14,
        
        DWG = 15,
        
        DWF = 16,
        
        Folder = 99,
    }
    
    /// <summary>
    /// “FileDescTemplate”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class FileDescTemplate : ComplexObject
    {
        
        private CustomDataType _dataType;
        
        private string _defaultValue;
        
        private int _displayIndex;
        
        private DocumentType _docType;
        
        private string _header;
        
        private int _identity;
        
        private bool _isRequired;
        
        private string _maximumValue;
        
        private string _minimumValue;
        
        private ActiveStatus _status;
        
        private int _templateId;
        
        private short _valueLength;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDataTypeChanging(CustomDataType value);
        partial void OnDataTypeChanged();
        partial void OnDefaultValueChanging(string value);
        partial void OnDefaultValueChanged();
        partial void OnDisplayIndexChanging(int value);
        partial void OnDisplayIndexChanged();
        partial void OnDocTypeChanging(DocumentType value);
        partial void OnDocTypeChanged();
        partial void OnHeaderChanging(string value);
        partial void OnHeaderChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnIsRequiredChanging(bool value);
        partial void OnIsRequiredChanged();
        partial void OnMaximumValueChanging(string value);
        partial void OnMaximumValueChanged();
        partial void OnMinimumValueChanging(string value);
        partial void OnMinimumValueChanged();
        partial void OnStatusChanging(ActiveStatus value);
        partial void OnStatusChanged();
        partial void OnTemplateIdChanging(int value);
        partial void OnTemplateIdChanged();
        partial void OnValueLengthChanging(short value);
        partial void OnValueLengthChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="FileDescTemplate"/> 类的新实例。
        /// </summary>
        public FileDescTemplate()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“DataType”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="数据类型", Order=4)]
        public CustomDataType DataType
        {
            get
            {
                return this._dataType;
            }
            set
            {
                if ((this._dataType != value))
                {
                    this.OnDataTypeChanging(value);
                    this.RaiseDataMemberChanging("DataType");
                    this.ValidateProperty("DataType", value);
                    this._dataType = value;
                    this.RaiseDataMemberChanged("DataType");
                    this.OnDataTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DefaultValue”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="默认值", Order=7)]
        public string DefaultValue
        {
            get
            {
                return this._defaultValue;
            }
            set
            {
                if ((this._defaultValue != value))
                {
                    this.OnDefaultValueChanging(value);
                    this.RaiseDataMemberChanging("DefaultValue");
                    this.ValidateProperty("DefaultValue", value);
                    this._defaultValue = value;
                    this.RaiseDataMemberChanged("DefaultValue");
                    this.OnDefaultValueChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DisplayIndex”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Description="按从小到大顺序显示", Name="显示顺序", Order=10)]
        public int DisplayIndex
        {
            get
            {
                return this._displayIndex;
            }
            set
            {
                if ((this._displayIndex != value))
                {
                    this.OnDisplayIndexChanging(value);
                    this.RaiseDataMemberChanging("DisplayIndex");
                    this.ValidateProperty("DisplayIndex", value);
                    this._displayIndex = value;
                    this.RaiseDataMemberChanged("DisplayIndex");
                    this.OnDisplayIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DocType”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="文件类型", Order=2)]
        public DocumentType DocType
        {
            get
            {
                return this._docType;
            }
            set
            {
                if ((this._docType != value))
                {
                    this.OnDocTypeChanging(value);
                    this.RaiseDataMemberChanging("DocType");
                    this.ValidateProperty("DocType", value);
                    this._docType = value;
                    this.RaiseDataMemberChanged("DocType");
                    this.OnDocTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Header”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="标题", Order=3)]
        public string Header
        {
            get
            {
                return this._header;
            }
            set
            {
                if ((this._header != value))
                {
                    this.OnHeaderChanging(value);
                    this.RaiseDataMemberChanging("Header");
                    this.ValidateProperty("Header", value);
                    this._header = value;
                    this.RaiseDataMemberChanged("Header");
                    this.OnHeaderChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="Identity", Order=0)]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“IsRequired”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="必填项", Order=9)]
        public bool IsRequired
        {
            get
            {
                return this._isRequired;
            }
            set
            {
                if ((this._isRequired != value))
                {
                    this.OnIsRequiredChanging(value);
                    this.RaiseDataMemberChanging("IsRequired");
                    this.ValidateProperty("IsRequired", value);
                    this._isRequired = value;
                    this.RaiseDataMemberChanged("IsRequired");
                    this.OnIsRequiredChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MaximumValue”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="最大值", Order=6)]
        public string MaximumValue
        {
            get
            {
                return this._maximumValue;
            }
            set
            {
                if ((this._maximumValue != value))
                {
                    this.OnMaximumValueChanging(value);
                    this.RaiseDataMemberChanging("MaximumValue");
                    this.ValidateProperty("MaximumValue", value);
                    this._maximumValue = value;
                    this.RaiseDataMemberChanged("MaximumValue");
                    this.OnMaximumValueChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MinimumValue”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="最小值", Order=5)]
        public string MinimumValue
        {
            get
            {
                return this._minimumValue;
            }
            set
            {
                if ((this._minimumValue != value))
                {
                    this.OnMinimumValueChanging(value);
                    this.RaiseDataMemberChanging("MinimumValue");
                    this.ValidateProperty("MinimumValue", value);
                    this._minimumValue = value;
                    this.RaiseDataMemberChanged("MinimumValue");
                    this.OnMinimumValueChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Status”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="状态", Order=11)]
        public ActiveStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“TemplateId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="TemplateId", Order=1)]
        public int TemplateId
        {
            get
            {
                return this._templateId;
            }
            set
            {
                if ((this._templateId != value))
                {
                    this.OnTemplateIdChanging(value);
                    this.RaiseDataMemberChanging("TemplateId");
                    this.ValidateProperty("TemplateId", value);
                    this._templateId = value;
                    this.RaiseDataMemberChanged("TemplateId");
                    this.OnTemplateIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ValueLength”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Description="固定长度字符串，如果不限长度，请输入0", Name="固定长度", Order=8)]
        public short ValueLength
        {
            get
            {
                return this._valueLength;
            }
            set
            {
                if ((this._valueLength != value))
                {
                    this.OnValueLengthChanging(value);
                    this.RaiseDataMemberChanging("ValueLength");
                    this.ValidateProperty("ValueLength", value);
                    this._valueLength = value;
                    this.RaiseDataMemberChanged("ValueLength");
                    this.OnValueLengthChanged();
                }
            }
        }
    }
    
    public enum FileReadMethod : short
    {
        
        [Display(Name="在线浏览")]
        Online = 0,
        
        [Display(Name="下载浏览")]
        Download = 1,
    }
    
    public enum FileSaveMethod : short
    {
        
        [Display(Name="文件系统")]
        FileSystem = 0,
        
        [Display(Name="数据库")]
        Database = 1,
    }
    
    /// <summary>
    /// “FileSystemEntity”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class FileSystemEntity : ComplexObject
    {
        
        private Document _documentInfo;
        
        private Guid _fileId;
        
        private int _fileRevision;
        
        private DocumentType _fileType;
        
        private int _folderId;
        
        private string _name;
        
        private string _orgId;
        
        private int _parentFolder;
        
        private FileSystemEntityType _type;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDocumentInfoChanging(Document value);
        partial void OnDocumentInfoChanged();
        partial void OnFileIdChanging(Guid value);
        partial void OnFileIdChanged();
        partial void OnFileRevisionChanging(int value);
        partial void OnFileRevisionChanged();
        partial void OnFileTypeChanging(DocumentType value);
        partial void OnFileTypeChanged();
        partial void OnFolderIdChanging(int value);
        partial void OnFolderIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOrgIdChanging(string value);
        partial void OnOrgIdChanged();
        partial void OnParentFolderChanging(int value);
        partial void OnParentFolderChanged();
        partial void OnTypeChanging(FileSystemEntityType value);
        partial void OnTypeChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="FileSystemEntity"/> 类的新实例。
        /// </summary>
        public FileSystemEntity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“DocumentInfo”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public Document DocumentInfo
        {
            get
            {
                return this._documentInfo;
            }
            set
            {
                if ((this._documentInfo != value))
                {
                    this.OnDocumentInfoChanging(value);
                    this.RaiseDataMemberChanging("DocumentInfo");
                    this.ValidateProperty("DocumentInfo", value);
                    this._documentInfo = value;
                    this.RaiseDataMemberChanged("DocumentInfo");
                    this.OnDocumentInfoChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FileId”值。
        /// </summary>
        [DataMember()]
        public Guid FileId
        {
            get
            {
                return this._fileId;
            }
            set
            {
                if ((this._fileId != value))
                {
                    this.OnFileIdChanging(value);
                    this.RaiseDataMemberChanging("FileId");
                    this.ValidateProperty("FileId", value);
                    this._fileId = value;
                    this.RaiseDataMemberChanged("FileId");
                    this.OnFileIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FileRevision”值。
        /// </summary>
        [DataMember()]
        public int FileRevision
        {
            get
            {
                return this._fileRevision;
            }
            set
            {
                if ((this._fileRevision != value))
                {
                    this.OnFileRevisionChanging(value);
                    this.RaiseDataMemberChanging("FileRevision");
                    this.ValidateProperty("FileRevision", value);
                    this._fileRevision = value;
                    this.RaiseDataMemberChanged("FileRevision");
                    this.OnFileRevisionChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FileType”值。
        /// </summary>
        [DataMember()]
        public DocumentType FileType
        {
            get
            {
                return this._fileType;
            }
            set
            {
                if ((this._fileType != value))
                {
                    this.OnFileTypeChanging(value);
                    this.RaiseDataMemberChanging("FileType");
                    this.ValidateProperty("FileType", value);
                    this._fileType = value;
                    this.RaiseDataMemberChanged("FileType");
                    this.OnFileTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FolderId”值。
        /// </summary>
        [DataMember()]
        public int FolderId
        {
            get
            {
                return this._folderId;
            }
            set
            {
                if ((this._folderId != value))
                {
                    this.OnFolderIdChanging(value);
                    this.RaiseDataMemberChanging("FolderId");
                    this.ValidateProperty("FolderId", value);
                    this._folderId = value;
                    this.RaiseDataMemberChanged("FolderId");
                    this.OnFolderIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Name”值。
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OrgId”值。
        /// </summary>
        [DataMember()]
        public string OrgId
        {
            get
            {
                return this._orgId;
            }
            set
            {
                if ((this._orgId != value))
                {
                    this.OnOrgIdChanging(value);
                    this.RaiseDataMemberChanging("OrgId");
                    this.ValidateProperty("OrgId", value);
                    this._orgId = value;
                    this.RaiseDataMemberChanged("OrgId");
                    this.OnOrgIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ParentFolder”值。
        /// </summary>
        [DataMember()]
        public int ParentFolder
        {
            get
            {
                return this._parentFolder;
            }
            set
            {
                if ((this._parentFolder != value))
                {
                    this.OnParentFolderChanging(value);
                    this.RaiseDataMemberChanging("ParentFolder");
                    this.ValidateProperty("ParentFolder", value);
                    this._parentFolder = value;
                    this.RaiseDataMemberChanged("ParentFolder");
                    this.OnParentFolderChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Type”值。
        /// </summary>
        [DataMember()]
        public FileSystemEntityType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
    }
    
    public enum FileSystemEntityType : short
    {
        
        [Display(Name="文件夹")]
        Folder = 0,
        
        [Display(Name="文件")]
        File = 1,
    }
    
    /// <summary>
    /// “FlowAuditRecord”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class FlowAuditRecord : ComplexObject
    {
        
        private ArchiveWorkflow _archiveFlow;
        
        private string _auditDescription;
        
        private DateTime _auditTime;
        
        private SystemUser _auditUser;
        
        private int _auditUserId;
        
        private int _flowId;
        
        private int _id;
        
        private int _identity;
        
        private AuditOperation _operation;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnArchiveFlowChanging(ArchiveWorkflow value);
        partial void OnArchiveFlowChanged();
        partial void OnAuditDescriptionChanging(string value);
        partial void OnAuditDescriptionChanged();
        partial void OnAuditTimeChanging(DateTime value);
        partial void OnAuditTimeChanged();
        partial void OnAuditUserChanging(SystemUser value);
        partial void OnAuditUserChanged();
        partial void OnAuditUserIdChanging(int value);
        partial void OnAuditUserIdChanged();
        partial void OnFlowIdChanging(int value);
        partial void OnFlowIdChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnOperationChanging(AuditOperation value);
        partial void OnOperationChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="FlowAuditRecord"/> 类的新实例。
        /// </summary>
        public FlowAuditRecord()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ArchiveFlow”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="流程", Order=3)]
        public ArchiveWorkflow ArchiveFlow
        {
            get
            {
                return this._archiveFlow;
            }
            set
            {
                if ((this._archiveFlow != value))
                {
                    this.OnArchiveFlowChanging(value);
                    this.RaiseDataMemberChanging("ArchiveFlow");
                    this.ValidateProperty("ArchiveFlow", value);
                    this._archiveFlow = value;
                    this.RaiseDataMemberChanged("ArchiveFlow");
                    this.OnArchiveFlowChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AuditDescription”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="说明", Order=8)]
        public string AuditDescription
        {
            get
            {
                return this._auditDescription;
            }
            set
            {
                if ((this._auditDescription != value))
                {
                    this.OnAuditDescriptionChanging(value);
                    this.RaiseDataMemberChanging("AuditDescription");
                    this.ValidateProperty("AuditDescription", value);
                    this._auditDescription = value;
                    this.RaiseDataMemberChanged("AuditDescription");
                    this.OnAuditDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AuditTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="时间", Order=6)]
        public DateTime AuditTime
        {
            get
            {
                return this._auditTime;
            }
            set
            {
                if ((this._auditTime != value))
                {
                    this.OnAuditTimeChanging(value);
                    this.RaiseDataMemberChanging("AuditTime");
                    this.ValidateProperty("AuditTime", value);
                    this._auditTime = value;
                    this.RaiseDataMemberChanged("AuditTime");
                    this.OnAuditTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AuditUser”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="用户", Order=5)]
        public SystemUser AuditUser
        {
            get
            {
                return this._auditUser;
            }
            set
            {
                if ((this._auditUser != value))
                {
                    this.OnAuditUserChanging(value);
                    this.RaiseDataMemberChanging("AuditUser");
                    this.ValidateProperty("AuditUser", value);
                    this._auditUser = value;
                    this.RaiseDataMemberChanged("AuditUser");
                    this.OnAuditUserChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AuditUserId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="用户ID", Order=4)]
        public int AuditUserId
        {
            get
            {
                return this._auditUserId;
            }
            set
            {
                if ((this._auditUserId != value))
                {
                    this.OnAuditUserIdChanging(value);
                    this.RaiseDataMemberChanging("AuditUserId");
                    this.ValidateProperty("AuditUserId", value);
                    this._auditUserId = value;
                    this.RaiseDataMemberChanged("AuditUserId");
                    this.OnAuditUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FlowId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="流程ID", Order=2)]
        public int FlowId
        {
            get
            {
                return this._flowId;
            }
            set
            {
                if ((this._flowId != value))
                {
                    this.OnFlowIdChanging(value);
                    this.RaiseDataMemberChanging("FlowId");
                    this.ValidateProperty("FlowId", value);
                    this._flowId = value;
                    this.RaiseDataMemberChanged("FlowId");
                    this.OnFlowIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Id”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="ID", Order=1)]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="Identity", Order=0)]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Operation”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="操作", Order=7)]
        public AuditOperation Operation
        {
            get
            {
                return this._operation;
            }
            set
            {
                if ((this._operation != value))
                {
                    this.OnOperationChanging(value);
                    this.RaiseDataMemberChanging("Operation");
                    this.ValidateProperty("Operation", value);
                    this._operation = value;
                    this.RaiseDataMemberChanged("Operation");
                    this.OnOperationChanged();
                }
            }
        }
    }
    
    public enum Gender : short
    {
        
        [Display(Name="男")]
        Male = 0,
        
        [Display(Name="女")]
        Female = 1,
    }
    
    /// <summary>
    /// “JointCheckupUser”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class JointCheckupUser : ComplexObject
    {
        
        private int _id;
        
        private int _identity;
        
        private int _stepId;
        
        private int _userId;
        
        private SystemUser _userInfo;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnStepIdChanging(int value);
        partial void OnStepIdChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnUserInfoChanging(SystemUser value);
        partial void OnUserInfoChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="JointCheckupUser"/> 类的新实例。
        /// </summary>
        public JointCheckupUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“Id”值。
        /// </summary>
        [DataMember()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“StepId”值。
        /// </summary>
        [DataMember()]
        public int StepId
        {
            get
            {
                return this._stepId;
            }
            set
            {
                if ((this._stepId != value))
                {
                    this.OnStepIdChanging(value);
                    this.RaiseDataMemberChanging("StepId");
                    this.ValidateProperty("StepId", value);
                    this._stepId = value;
                    this.RaiseDataMemberChanged("StepId");
                    this.OnStepIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UserId”值。
        /// </summary>
        [DataMember()]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UserInfo”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public SystemUser UserInfo
        {
            get
            {
                return this._userInfo;
            }
            set
            {
                if ((this._userInfo != value))
                {
                    this.OnUserInfoChanging(value);
                    this.RaiseDataMemberChanging("UserInfo");
                    this.ValidateProperty("UserInfo", value);
                    this._userInfo = value;
                    this.RaiseDataMemberChanged("UserInfo");
                    this.OnUserInfoChanged();
                }
            }
        }
    }
    
    public enum ModuleType : short
    {
        
        [Display(Name="请选择")]
        None = 0,
        
        [Display(Name="系统")]
        System = 1,
        
        [Display(Name="模块")]
        Module = 2,
        
        [Display(Name="菜单")]
        Menu = 3,
        
        [Display(Name="功能")]
        Function = 4,
    }
    
    /// <summary>
    /// “Organization”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class Organization : ComplexObject
    {
        
        private string _address;
        
        private ObservableCollection<Organization> _children;
        
        private string _code;
        
        private string _description;
        
        private string _email;
        
        private string _fax;
        
        private string _id;
        
        private int _identity;
        
        private string _name;
        
        private string _parentId;
        
        private ActiveStatus _status;
        
        private string _telphone;
        
        private OrganizationType _type;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnChildrenChanging(ObservableCollection<Organization> value);
        partial void OnChildrenChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnIdChanging(string value);
        partial void OnIdChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParentIdChanging(string value);
        partial void OnParentIdChanged();
        partial void OnStatusChanging(ActiveStatus value);
        partial void OnStatusChanged();
        partial void OnTelphoneChanging(string value);
        partial void OnTelphoneChanged();
        partial void OnTypeChanging(OrganizationType value);
        partial void OnTypeChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="Organization"/> 类的新实例。
        /// </summary>
        public Organization()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“Address”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="地址", Order=9)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Children”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="下级组织", Order=12)]
        public ObservableCollection<Organization> Children
        {
            get
            {
                return this._children;
            }
            set
            {
                if ((this._children != value))
                {
                    this.OnChildrenChanging(value);
                    this.RaiseDataMemberChanging("Children");
                    this.ValidateProperty("Children", value);
                    this._children = value;
                    this.RaiseDataMemberChanged("Children");
                    this.OnChildrenChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Code”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="编码", Order=4)]
        [Required(ErrorMessage="请输入编码！")]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Description”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="简介", Order=10)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Email”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="邮箱", Order=8)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Fax”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="传真", Order=7)]
        public string Fax
        {
            get
            {
                return this._fax;
            }
            set
            {
                if ((this._fax != value))
                {
                    this.OnFaxChanging(value);
                    this.RaiseDataMemberChanging("Fax");
                    this.ValidateProperty("Fax", value);
                    this._fax = value;
                    this.RaiseDataMemberChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Id”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="组织ID", Order=1)]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="Identity", Order=0)]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Name”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="名称", Order=5)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ParentId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="上级组织ID", Order=2)]
        public string ParentId
        {
            get
            {
                return this._parentId;
            }
            set
            {
                if ((this._parentId != value))
                {
                    this.OnParentIdChanging(value);
                    this.RaiseDataMemberChanging("ParentId");
                    this.ValidateProperty("ParentId", value);
                    this._parentId = value;
                    this.RaiseDataMemberChanged("ParentId");
                    this.OnParentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Status”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="状态", Order=11)]
        public ActiveStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Telphone”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="电话", Order=6)]
        public string Telphone
        {
            get
            {
                return this._telphone;
            }
            set
            {
                if ((this._telphone != value))
                {
                    this.OnTelphoneChanging(value);
                    this.RaiseDataMemberChanging("Telphone");
                    this.ValidateProperty("Telphone", value);
                    this._telphone = value;
                    this.RaiseDataMemberChanged("Telphone");
                    this.OnTelphoneChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Type”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="类型", Order=3)]
        public OrganizationType Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
    }
    
    public enum OrganizationType : short
    {
        
        [Display(Name="请选择")]
        None = 0,
        
        [Display(Name="总公司")]
        Company = 1,
        
        [Display(Name="部门")]
        Department = 2,
        
        [Display(Name="组")]
        Team = 3,
        
        [Display(Name="工厂")]
        Factory = 4,
        
        [Display(Name="车间")]
        WorkShop = 5,
        
        [Display(Name="班次")]
        Thread = 6,
    }
    
    /// <summary>
    /// “RoleModuleRel”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class RoleModuleRel : ComplexObject
    {
        
        private int _createdBy;
        
        private DateTime _createTime;
        
        private DateTime _expireTime;
        
        private int _id;
        
        private int _identity;
        
        private bool _includeChild;
        
        private int _lastUpdatedBy;
        
        private DateTime _lastUpdateTime;
        
        private string _moduleId;
        
        private SystemModule _moduleInfo;
        
        private int _roleId;
        
        private DateTime _startTime;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCreatedByChanging(int value);
        partial void OnCreatedByChanged();
        partial void OnCreateTimeChanging(DateTime value);
        partial void OnCreateTimeChanged();
        partial void OnExpireTimeChanging(DateTime value);
        partial void OnExpireTimeChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnIncludeChildChanging(bool value);
        partial void OnIncludeChildChanged();
        partial void OnLastUpdatedByChanging(int value);
        partial void OnLastUpdatedByChanged();
        partial void OnLastUpdateTimeChanging(DateTime value);
        partial void OnLastUpdateTimeChanged();
        partial void OnModuleIdChanging(string value);
        partial void OnModuleIdChanged();
        partial void OnModuleInfoChanging(SystemModule value);
        partial void OnModuleInfoChanged();
        partial void OnRoleIdChanging(int value);
        partial void OnRoleIdChanged();
        partial void OnStartTimeChanging(DateTime value);
        partial void OnStartTimeChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="RoleModuleRel"/> 类的新实例。
        /// </summary>
        public RoleModuleRel()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CreatedBy”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="添加人ID", Order=7)]
        public int CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                if ((this._createdBy != value))
                {
                    this.OnCreatedByChanging(value);
                    this.RaiseDataMemberChanging("CreatedBy");
                    this.ValidateProperty("CreatedBy", value);
                    this._createdBy = value;
                    this.RaiseDataMemberChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CreateTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="添加日期", Order=8)]
        public DateTime CreateTime
        {
            get
            {
                return this._createTime;
            }
            set
            {
                if ((this._createTime != value))
                {
                    this.OnCreateTimeChanging(value);
                    this.RaiseDataMemberChanging("CreateTime");
                    this.ValidateProperty("CreateTime", value);
                    this._createTime = value;
                    this.RaiseDataMemberChanged("CreateTime");
                    this.OnCreateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ExpireTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="停用日期", Order=6)]
        public DateTime ExpireTime
        {
            get
            {
                return this._expireTime;
            }
            set
            {
                if ((this._expireTime != value))
                {
                    this.OnExpireTimeChanging(value);
                    this.RaiseDataMemberChanging("ExpireTime");
                    this.ValidateProperty("ExpireTime", value);
                    this._expireTime = value;
                    this.RaiseDataMemberChanged("ExpireTime");
                    this.OnExpireTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Id”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="ID", Order=0)]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="Identity")]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“IncludeChild”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="含下级模块", Order=4)]
        public bool IncludeChild
        {
            get
            {
                return this._includeChild;
            }
            set
            {
                if ((this._includeChild != value))
                {
                    this.OnIncludeChildChanging(value);
                    this.RaiseDataMemberChanging("IncludeChild");
                    this.ValidateProperty("IncludeChild", value);
                    this._includeChild = value;
                    this.RaiseDataMemberChanged("IncludeChild");
                    this.OnIncludeChildChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LastUpdatedBy”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="最后更新人ID", Order=9)]
        public int LastUpdatedBy
        {
            get
            {
                return this._lastUpdatedBy;
            }
            set
            {
                if ((this._lastUpdatedBy != value))
                {
                    this.OnLastUpdatedByChanging(value);
                    this.RaiseDataMemberChanging("LastUpdatedBy");
                    this.ValidateProperty("LastUpdatedBy", value);
                    this._lastUpdatedBy = value;
                    this.RaiseDataMemberChanged("LastUpdatedBy");
                    this.OnLastUpdatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LastUpdateTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="最后更新时间", Order=10)]
        public DateTime LastUpdateTime
        {
            get
            {
                return this._lastUpdateTime;
            }
            set
            {
                if ((this._lastUpdateTime != value))
                {
                    this.OnLastUpdateTimeChanging(value);
                    this.RaiseDataMemberChanging("LastUpdateTime");
                    this.ValidateProperty("LastUpdateTime", value);
                    this._lastUpdateTime = value;
                    this.RaiseDataMemberChanged("LastUpdateTime");
                    this.OnLastUpdateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ModuleId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="模块ID", Order=2)]
        public string ModuleId
        {
            get
            {
                return this._moduleId;
            }
            set
            {
                if ((this._moduleId != value))
                {
                    this.OnModuleIdChanging(value);
                    this.RaiseDataMemberChanging("ModuleId");
                    this.ValidateProperty("ModuleId", value);
                    this._moduleId = value;
                    this.RaiseDataMemberChanged("ModuleId");
                    this.OnModuleIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ModuleInfo”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="模块", Order=3)]
        public SystemModule ModuleInfo
        {
            get
            {
                return this._moduleInfo;
            }
            set
            {
                if ((this._moduleInfo != value))
                {
                    this.OnModuleInfoChanging(value);
                    this.RaiseDataMemberChanging("ModuleInfo");
                    this.ValidateProperty("ModuleInfo", value);
                    this._moduleInfo = value;
                    this.RaiseDataMemberChanged("ModuleInfo");
                    this.OnModuleInfoChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RoleId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="角色ID", Order=1)]
        public int RoleId
        {
            get
            {
                return this._roleId;
            }
            set
            {
                if ((this._roleId != value))
                {
                    this.OnRoleIdChanging(value);
                    this.RaiseDataMemberChanging("RoleId");
                    this.ValidateProperty("RoleId", value);
                    this._roleId = value;
                    this.RaiseDataMemberChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“StartTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="启用日期", Order=5)]
        public DateTime StartTime
        {
            get
            {
                return this._startTime;
            }
            set
            {
                if ((this._startTime != value))
                {
                    this.OnStartTimeChanging(value);
                    this.RaiseDataMemberChanging("StartTime");
                    this.ValidateProperty("StartTime", value);
                    this._startTime = value;
                    this.RaiseDataMemberChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// “SystemConfig”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class SystemConfig : ComplexObject
    {
        
        private string _applicationName;
        
        private string _fileSaveUrl;
        
        private int _id;
        
        private int _identity;
        
        private FileReadMethod _readMethod;
        
        private bool _recordAudit;
        
        private FileSaveMethod _saveMethod;
        
        private string _serverPassword;
        
        private string _serverUserName;
        
        private int _writeLog;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnApplicationNameChanging(string value);
        partial void OnApplicationNameChanged();
        partial void OnFileSaveUrlChanging(string value);
        partial void OnFileSaveUrlChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnReadMethodChanging(FileReadMethod value);
        partial void OnReadMethodChanged();
        partial void OnRecordAuditChanging(bool value);
        partial void OnRecordAuditChanged();
        partial void OnSaveMethodChanging(FileSaveMethod value);
        partial void OnSaveMethodChanged();
        partial void OnServerPasswordChanging(string value);
        partial void OnServerPasswordChanged();
        partial void OnServerUserNameChanging(string value);
        partial void OnServerUserNameChanged();
        partial void OnWriteLogChanging(int value);
        partial void OnWriteLogChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SystemConfig"/> 类的新实例。
        /// </summary>
        public SystemConfig()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ApplicationName”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="系统名称", Order=2)]
        public string ApplicationName
        {
            get
            {
                return this._applicationName;
            }
            set
            {
                if ((this._applicationName != value))
                {
                    this.OnApplicationNameChanging(value);
                    this.RaiseDataMemberChanging("ApplicationName");
                    this.ValidateProperty("ApplicationName", value);
                    this._applicationName = value;
                    this.RaiseDataMemberChanged("ApplicationName");
                    this.OnApplicationNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FileSaveUrl”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="文件保存地址", Order=7)]
        public string FileSaveUrl
        {
            get
            {
                return this._fileSaveUrl;
            }
            set
            {
                if ((this._fileSaveUrl != value))
                {
                    this.OnFileSaveUrlChanging(value);
                    this.RaiseDataMemberChanging("FileSaveUrl");
                    this.ValidateProperty("FileSaveUrl", value);
                    this._fileSaveUrl = value;
                    this.RaiseDataMemberChanged("FileSaveUrl");
                    this.OnFileSaveUrlChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Id”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="Id", Order=1)]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="Identity", Order=0)]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ReadMethod”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="文件阅读方式", Order=6)]
        public FileReadMethod ReadMethod
        {
            get
            {
                return this._readMethod;
            }
            set
            {
                if ((this._readMethod != value))
                {
                    this.OnReadMethodChanging(value);
                    this.RaiseDataMemberChanging("ReadMethod");
                    this.ValidateProperty("ReadMethod", value);
                    this._readMethod = value;
                    this.RaiseDataMemberChanged("ReadMethod");
                    this.OnReadMethodChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RecordAudit”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="数据审计", Order=4)]
        public bool RecordAudit
        {
            get
            {
                return this._recordAudit;
            }
            set
            {
                if ((this._recordAudit != value))
                {
                    this.OnRecordAuditChanging(value);
                    this.RaiseDataMemberChanging("RecordAudit");
                    this.ValidateProperty("RecordAudit", value);
                    this._recordAudit = value;
                    this.RaiseDataMemberChanged("RecordAudit");
                    this.OnRecordAuditChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“SaveMethod”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="文件保存方式", Order=5)]
        public FileSaveMethod SaveMethod
        {
            get
            {
                return this._saveMethod;
            }
            set
            {
                if ((this._saveMethod != value))
                {
                    this.OnSaveMethodChanging(value);
                    this.RaiseDataMemberChanging("SaveMethod");
                    this.ValidateProperty("SaveMethod", value);
                    this._saveMethod = value;
                    this.RaiseDataMemberChanged("SaveMethod");
                    this.OnSaveMethodChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ServerPassword”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="文件服务器密码", Order=9)]
        public string ServerPassword
        {
            get
            {
                return this._serverPassword;
            }
            set
            {
                if ((this._serverPassword != value))
                {
                    this.OnServerPasswordChanging(value);
                    this.RaiseDataMemberChanging("ServerPassword");
                    this.ValidateProperty("ServerPassword", value);
                    this._serverPassword = value;
                    this.RaiseDataMemberChanged("ServerPassword");
                    this.OnServerPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ServerUserName”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="文件服务器用户名", Order=8)]
        public string ServerUserName
        {
            get
            {
                return this._serverUserName;
            }
            set
            {
                if ((this._serverUserName != value))
                {
                    this.OnServerUserNameChanging(value);
                    this.RaiseDataMemberChanging("ServerUserName");
                    this.ValidateProperty("ServerUserName", value);
                    this._serverUserName = value;
                    this.RaiseDataMemberChanged("ServerUserName");
                    this.OnServerUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“WriteLog”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="记录日志", Order=3)]
        public int WriteLog
        {
            get
            {
                return this._writeLog;
            }
            set
            {
                if ((this._writeLog != value))
                {
                    this.OnWriteLogChanging(value);
                    this.RaiseDataMemberChanging("WriteLog");
                    this.ValidateProperty("WriteLog", value);
                    this._writeLog = value;
                    this.RaiseDataMemberChanged("WriteLog");
                    this.OnWriteLogChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// “SystemMessage”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class SystemMessage : ComplexObject
    {
        
        private int _createdBy;
        
        private DateTime _createTime;
        
        private SystemUser _createUser;
        
        private int _identity;
        
        private string _messageContent;
        
        private int _messageId;
        
        private string _messageTitle;
        
        private int _remindTimes;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCreatedByChanging(int value);
        partial void OnCreatedByChanged();
        partial void OnCreateTimeChanging(DateTime value);
        partial void OnCreateTimeChanged();
        partial void OnCreateUserChanging(SystemUser value);
        partial void OnCreateUserChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnMessageContentChanging(string value);
        partial void OnMessageContentChanged();
        partial void OnMessageIdChanging(int value);
        partial void OnMessageIdChanged();
        partial void OnMessageTitleChanging(string value);
        partial void OnMessageTitleChanged();
        partial void OnRemindTimesChanging(int value);
        partial void OnRemindTimesChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SystemMessage"/> 类的新实例。
        /// </summary>
        public SystemMessage()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CreatedBy”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="创建人ID")]
        public int CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                if ((this._createdBy != value))
                {
                    this.OnCreatedByChanging(value);
                    this.RaiseDataMemberChanging("CreatedBy");
                    this.ValidateProperty("CreatedBy", value);
                    this._createdBy = value;
                    this.RaiseDataMemberChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CreateTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="创建日期", Order=4)]
        public DateTime CreateTime
        {
            get
            {
                return this._createTime;
            }
            set
            {
                if ((this._createTime != value))
                {
                    this.OnCreateTimeChanging(value);
                    this.RaiseDataMemberChanging("CreateTime");
                    this.ValidateProperty("CreateTime", value);
                    this._createTime = value;
                    this.RaiseDataMemberChanged("CreateTime");
                    this.OnCreateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CreateUser”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="发布人", Order=3)]
        public SystemUser CreateUser
        {
            get
            {
                return this._createUser;
            }
            set
            {
                if ((this._createUser != value))
                {
                    this.OnCreateUserChanging(value);
                    this.RaiseDataMemberChanging("CreateUser");
                    this.ValidateProperty("CreateUser", value);
                    this._createUser = value;
                    this.RaiseDataMemberChanged("CreateUser");
                    this.OnCreateUserChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="Identity")]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MessageContent”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="内容", Order=2)]
        public string MessageContent
        {
            get
            {
                return this._messageContent;
            }
            set
            {
                if ((this._messageContent != value))
                {
                    this.OnMessageContentChanging(value);
                    this.RaiseDataMemberChanging("MessageContent");
                    this.ValidateProperty("MessageContent", value);
                    this._messageContent = value;
                    this.RaiseDataMemberChanged("MessageContent");
                    this.OnMessageContentChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MessageId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="消息ID")]
        public int MessageId
        {
            get
            {
                return this._messageId;
            }
            set
            {
                if ((this._messageId != value))
                {
                    this.OnMessageIdChanging(value);
                    this.RaiseDataMemberChanging("MessageId");
                    this.ValidateProperty("MessageId", value);
                    this._messageId = value;
                    this.RaiseDataMemberChanged("MessageId");
                    this.OnMessageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MessageTitle”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="标题", Order=1)]
        public string MessageTitle
        {
            get
            {
                return this._messageTitle;
            }
            set
            {
                if ((this._messageTitle != value))
                {
                    this.OnMessageTitleChanging(value);
                    this.RaiseDataMemberChanging("MessageTitle");
                    this.ValidateProperty("MessageTitle", value);
                    this._messageTitle = value;
                    this.RaiseDataMemberChanged("MessageTitle");
                    this.OnMessageTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RemindTimes”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="提醒次数", Order=5)]
        public int RemindTimes
        {
            get
            {
                return this._remindTimes;
            }
            set
            {
                if ((this._remindTimes != value))
                {
                    this.OnRemindTimesChanging(value);
                    this.RaiseDataMemberChanging("RemindTimes");
                    this.ValidateProperty("RemindTimes", value);
                    this._remindTimes = value;
                    this.RaiseDataMemberChanged("RemindTimes");
                    this.OnRemindTimesChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// “SystemMessageOrg”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class SystemMessageOrg : ComplexObject
    {
        
        private int _id;
        
        private int _identity;
        
        private int _messageId;
        
        private string _organizationId;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnMessageIdChanging(int value);
        partial void OnMessageIdChanged();
        partial void OnOrganizationIdChanging(string value);
        partial void OnOrganizationIdChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SystemMessageOrg"/> 类的新实例。
        /// </summary>
        public SystemMessageOrg()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“Id”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="ID")]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MessageId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="消息ID")]
        public int MessageId
        {
            get
            {
                return this._messageId;
            }
            set
            {
                if ((this._messageId != value))
                {
                    this.OnMessageIdChanging(value);
                    this.RaiseDataMemberChanging("MessageId");
                    this.ValidateProperty("MessageId", value);
                    this._messageId = value;
                    this.RaiseDataMemberChanged("MessageId");
                    this.OnMessageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OrganizationId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="组织ID")]
        public string OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// “SystemMessageUser”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class SystemMessageUser : ComplexObject
    {
        
        private int _id;
        
        private int _identity;
        
        private int _messageId;
        
        private int _userId;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnMessageIdChanging(int value);
        partial void OnMessageIdChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SystemMessageUser"/> 类的新实例。
        /// </summary>
        public SystemMessageUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“Id”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="ID")]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MessageId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="消息ID")]
        public int MessageId
        {
            get
            {
                return this._messageId;
            }
            set
            {
                if ((this._messageId != value))
                {
                    this.OnMessageIdChanging(value);
                    this.RaiseDataMemberChanging("MessageId");
                    this.ValidateProperty("MessageId", value);
                    this._messageId = value;
                    this.RaiseDataMemberChanged("MessageId");
                    this.OnMessageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UserId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="用户ID")]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// “SystemModule”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class SystemModule : ComplexObject
    {
        
        private List<SystemModule> _children;
        
        private int _identity;
        
        private string _moduleCode;
        
        private string _moduleId;
        
        private string _moduleName;
        
        private ActiveStatus _moduleStatus;
        
        private ModuleType _moduleType;
        
        private string _navigateUri;
        
        private string _parentId;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnChildrenChanging(List<SystemModule> value);
        partial void OnChildrenChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnModuleCodeChanging(string value);
        partial void OnModuleCodeChanged();
        partial void OnModuleIdChanging(string value);
        partial void OnModuleIdChanged();
        partial void OnModuleNameChanging(string value);
        partial void OnModuleNameChanged();
        partial void OnModuleStatusChanging(ActiveStatus value);
        partial void OnModuleStatusChanged();
        partial void OnModuleTypeChanging(ModuleType value);
        partial void OnModuleTypeChanged();
        partial void OnNavigateUriChanging(string value);
        partial void OnNavigateUriChanged();
        partial void OnParentIdChanging(string value);
        partial void OnParentIdChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SystemModule"/> 类的新实例。
        /// </summary>
        public SystemModule()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“Children”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public List<SystemModule> Children
        {
            get
            {
                return this._children;
            }
            set
            {
                if ((this._children != value))
                {
                    this.OnChildrenChanging(value);
                    this.RaiseDataMemberChanging("Children");
                    this.ValidateProperty("Children", value);
                    this._children = value;
                    this.RaiseDataMemberChanged("Children");
                    this.OnChildrenChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ModuleCode”值。
        /// </summary>
        [DataMember()]
        public string ModuleCode
        {
            get
            {
                return this._moduleCode;
            }
            set
            {
                if ((this._moduleCode != value))
                {
                    this.OnModuleCodeChanging(value);
                    this.RaiseDataMemberChanging("ModuleCode");
                    this.ValidateProperty("ModuleCode", value);
                    this._moduleCode = value;
                    this.RaiseDataMemberChanged("ModuleCode");
                    this.OnModuleCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ModuleId”值。
        /// </summary>
        [DataMember()]
        public string ModuleId
        {
            get
            {
                return this._moduleId;
            }
            set
            {
                if ((this._moduleId != value))
                {
                    this.OnModuleIdChanging(value);
                    this.RaiseDataMemberChanging("ModuleId");
                    this.ValidateProperty("ModuleId", value);
                    this._moduleId = value;
                    this.RaiseDataMemberChanged("ModuleId");
                    this.OnModuleIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ModuleName”值。
        /// </summary>
        [DataMember()]
        public string ModuleName
        {
            get
            {
                return this._moduleName;
            }
            set
            {
                if ((this._moduleName != value))
                {
                    this.OnModuleNameChanging(value);
                    this.RaiseDataMemberChanging("ModuleName");
                    this.ValidateProperty("ModuleName", value);
                    this._moduleName = value;
                    this.RaiseDataMemberChanged("ModuleName");
                    this.OnModuleNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ModuleStatus”值。
        /// </summary>
        [DataMember()]
        public ActiveStatus ModuleStatus
        {
            get
            {
                return this._moduleStatus;
            }
            set
            {
                if ((this._moduleStatus != value))
                {
                    this.OnModuleStatusChanging(value);
                    this.RaiseDataMemberChanging("ModuleStatus");
                    this.ValidateProperty("ModuleStatus", value);
                    this._moduleStatus = value;
                    this.RaiseDataMemberChanged("ModuleStatus");
                    this.OnModuleStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ModuleType”值。
        /// </summary>
        [DataMember()]
        public ModuleType ModuleType
        {
            get
            {
                return this._moduleType;
            }
            set
            {
                if ((this._moduleType != value))
                {
                    this.OnModuleTypeChanging(value);
                    this.RaiseDataMemberChanging("ModuleType");
                    this.ValidateProperty("ModuleType", value);
                    this._moduleType = value;
                    this.RaiseDataMemberChanged("ModuleType");
                    this.OnModuleTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NavigateUri”值。
        /// </summary>
        [DataMember()]
        public string NavigateUri
        {
            get
            {
                return this._navigateUri;
            }
            set
            {
                if ((this._navigateUri != value))
                {
                    this.OnNavigateUriChanging(value);
                    this.RaiseDataMemberChanging("NavigateUri");
                    this.ValidateProperty("NavigateUri", value);
                    this._navigateUri = value;
                    this.RaiseDataMemberChanged("NavigateUri");
                    this.OnNavigateUriChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ParentId”值。
        /// </summary>
        [DataMember()]
        public string ParentId
        {
            get
            {
                return this._parentId;
            }
            set
            {
                if ((this._parentId != value))
                {
                    this.OnParentIdChanging(value);
                    this.RaiseDataMemberChanging("ParentId");
                    this.ValidateProperty("ParentId", value);
                    this._parentId = value;
                    this.RaiseDataMemberChanged("ParentId");
                    this.OnParentIdChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// “SystemRole”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class SystemRole : ComplexObject
    {
        
        private int _createdBy;
        
        private DateTime _createTime;
        
        private SystemUser _createUser;
        
        private int _identity;
        
        private int _lastUpdatedBy;
        
        private DateTime _lastUpdateTime;
        
        private SystemUser _lastUpdateUser;
        
        private string _roleCode;
        
        private int _roleId;
        
        private string _roleName;
        
        private ActiveStatus _status;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCreatedByChanging(int value);
        partial void OnCreatedByChanged();
        partial void OnCreateTimeChanging(DateTime value);
        partial void OnCreateTimeChanged();
        partial void OnCreateUserChanging(SystemUser value);
        partial void OnCreateUserChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnLastUpdatedByChanging(int value);
        partial void OnLastUpdatedByChanged();
        partial void OnLastUpdateTimeChanging(DateTime value);
        partial void OnLastUpdateTimeChanged();
        partial void OnLastUpdateUserChanging(SystemUser value);
        partial void OnLastUpdateUserChanged();
        partial void OnRoleCodeChanging(string value);
        partial void OnRoleCodeChanged();
        partial void OnRoleIdChanging(int value);
        partial void OnRoleIdChanged();
        partial void OnRoleNameChanging(string value);
        partial void OnRoleNameChanged();
        partial void OnStatusChanging(ActiveStatus value);
        partial void OnStatusChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SystemRole"/> 类的新实例。
        /// </summary>
        public SystemRole()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CreatedBy”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="添加人ID", Order=3)]
        public int CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                if ((this._createdBy != value))
                {
                    this.OnCreatedByChanging(value);
                    this.RaiseDataMemberChanging("CreatedBy");
                    this.ValidateProperty("CreatedBy", value);
                    this._createdBy = value;
                    this.RaiseDataMemberChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CreateTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="添加时间", Order=5)]
        [DisplayFormat(DataFormatString="yyyy-MM-dd HH:mm:ss")]
        public DateTime CreateTime
        {
            get
            {
                return this._createTime;
            }
            set
            {
                if ((this._createTime != value))
                {
                    this.OnCreateTimeChanging(value);
                    this.RaiseDataMemberChanging("CreateTime");
                    this.ValidateProperty("CreateTime", value);
                    this._createTime = value;
                    this.RaiseDataMemberChanged("CreateTime");
                    this.OnCreateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CreateUser”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="添加人", Order=4)]
        public SystemUser CreateUser
        {
            get
            {
                return this._createUser;
            }
            set
            {
                if ((this._createUser != value))
                {
                    this.OnCreateUserChanging(value);
                    this.RaiseDataMemberChanging("CreateUser");
                    this.ValidateProperty("CreateUser", value);
                    this._createUser = value;
                    this.RaiseDataMemberChanged("CreateUser");
                    this.OnCreateUserChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="Identity")]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LastUpdatedBy”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="最后更新人ID", Order=6)]
        public int LastUpdatedBy
        {
            get
            {
                return this._lastUpdatedBy;
            }
            set
            {
                if ((this._lastUpdatedBy != value))
                {
                    this.OnLastUpdatedByChanging(value);
                    this.RaiseDataMemberChanging("LastUpdatedBy");
                    this.ValidateProperty("LastUpdatedBy", value);
                    this._lastUpdatedBy = value;
                    this.RaiseDataMemberChanged("LastUpdatedBy");
                    this.OnLastUpdatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LastUpdateTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="最新更新时间", Order=8)]
        [DisplayFormat(DataFormatString="yyyy-MM-dd HH:mm:ss")]
        public DateTime LastUpdateTime
        {
            get
            {
                return this._lastUpdateTime;
            }
            set
            {
                if ((this._lastUpdateTime != value))
                {
                    this.OnLastUpdateTimeChanging(value);
                    this.RaiseDataMemberChanging("LastUpdateTime");
                    this.ValidateProperty("LastUpdateTime", value);
                    this._lastUpdateTime = value;
                    this.RaiseDataMemberChanged("LastUpdateTime");
                    this.OnLastUpdateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LastUpdateUser”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="最后更新人", Order=7)]
        public SystemUser LastUpdateUser
        {
            get
            {
                return this._lastUpdateUser;
            }
            set
            {
                if ((this._lastUpdateUser != value))
                {
                    this.OnLastUpdateUserChanging(value);
                    this.RaiseDataMemberChanging("LastUpdateUser");
                    this.ValidateProperty("LastUpdateUser", value);
                    this._lastUpdateUser = value;
                    this.RaiseDataMemberChanged("LastUpdateUser");
                    this.OnLastUpdateUserChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RoleCode”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="角色编码", Order=1)]
        [RegularExpression("^[a-zA-Z0-9_-]*$", ErrorMessage="角色编码只能由数字、字母和下划线组成")]
        [Required(ErrorMessage="请填写角色编码")]
        [StringLength(32, ErrorMessage="角色编码长度需在4~32个字符之间", MinimumLength=4)]
        public string RoleCode
        {
            get
            {
                return this._roleCode;
            }
            set
            {
                if ((this._roleCode != value))
                {
                    this.OnRoleCodeChanging(value);
                    this.RaiseDataMemberChanging("RoleCode");
                    this.ValidateProperty("RoleCode", value);
                    this._roleCode = value;
                    this.RaiseDataMemberChanged("RoleCode");
                    this.OnRoleCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RoleId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="角色ID")]
        public int RoleId
        {
            get
            {
                return this._roleId;
            }
            set
            {
                if ((this._roleId != value))
                {
                    this.OnRoleIdChanging(value);
                    this.RaiseDataMemberChanging("RoleId");
                    this.ValidateProperty("RoleId", value);
                    this._roleId = value;
                    this.RaiseDataMemberChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RoleName”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="角色名", Order=2)]
        public string RoleName
        {
            get
            {
                return this._roleName;
            }
            set
            {
                if ((this._roleName != value))
                {
                    this.OnRoleNameChanging(value);
                    this.RaiseDataMemberChanging("RoleName");
                    this.ValidateProperty("RoleName", value);
                    this._roleName = value;
                    this.RaiseDataMemberChanged("RoleName");
                    this.OnRoleNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Status”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="状态", Order=9)]
        public ActiveStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// “SystemUser”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class SystemUser : ComplexObject
    {
        
        private string _address;
        
        private string _description;
        
        private string _email;
        
        private string _fax;
        
        private Gender _gender;
        
        private int _identity;
        
        private string _mobile;
        
        private string _qq;
        
        private string _realName;
        
        private ActiveStatus _status;
        
        private string _telphone;
        
        private string _userCode;
        
        private int _userId;
        
        private string _userName;
        
        private string _userPassword;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        partial void OnGenderChanging(Gender value);
        partial void OnGenderChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnMobileChanging(string value);
        partial void OnMobileChanged();
        partial void OnQQChanging(string value);
        partial void OnQQChanged();
        partial void OnRealNameChanging(string value);
        partial void OnRealNameChanged();
        partial void OnStatusChanging(ActiveStatus value);
        partial void OnStatusChanged();
        partial void OnTelphoneChanging(string value);
        partial void OnTelphoneChanged();
        partial void OnUserCodeChanging(string value);
        partial void OnUserCodeChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnUserPasswordChanging(string value);
        partial void OnUserPasswordChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SystemUser"/> 类的新实例。
        /// </summary>
        public SystemUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“Address”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="地址", Order=11)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Description”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="个人描述", Order=12)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Email”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="邮箱", Order=10)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Fax”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="传真", Order=8)]
        public string Fax
        {
            get
            {
                return this._fax;
            }
            set
            {
                if ((this._fax != value))
                {
                    this.OnFaxChanging(value);
                    this.RaiseDataMemberChanging("Fax");
                    this.ValidateProperty("Fax", value);
                    this._fax = value;
                    this.RaiseDataMemberChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Gender”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="性别", Order=4)]
        public Gender Gender
        {
            get
            {
                return this._gender;
            }
            set
            {
                if ((this._gender != value))
                {
                    this.OnGenderChanging(value);
                    this.RaiseDataMemberChanging("Gender");
                    this.ValidateProperty("Gender", value);
                    this._gender = value;
                    this.RaiseDataMemberChanged("Gender");
                    this.OnGenderChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Mobile”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="手机", Order=7)]
        public string Mobile
        {
            get
            {
                return this._mobile;
            }
            set
            {
                if ((this._mobile != value))
                {
                    this.OnMobileChanging(value);
                    this.RaiseDataMemberChanging("Mobile");
                    this.ValidateProperty("Mobile", value);
                    this._mobile = value;
                    this.RaiseDataMemberChanged("Mobile");
                    this.OnMobileChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“QQ”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="QQ", Order=9)]
        public string QQ
        {
            get
            {
                return this._qq;
            }
            set
            {
                if ((this._qq != value))
                {
                    this.OnQQChanging(value);
                    this.RaiseDataMemberChanging("QQ");
                    this.ValidateProperty("QQ", value);
                    this._qq = value;
                    this.RaiseDataMemberChanged("QQ");
                    this.OnQQChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RealName”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="真实姓名", Order=5)]
        public string RealName
        {
            get
            {
                return this._realName;
            }
            set
            {
                if ((this._realName != value))
                {
                    this.OnRealNameChanging(value);
                    this.RaiseDataMemberChanging("RealName");
                    this.ValidateProperty("RealName", value);
                    this._realName = value;
                    this.RaiseDataMemberChanged("RealName");
                    this.OnRealNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Status”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="状态", Order=13)]
        public ActiveStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Telphone”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="电话", Order=6)]
        public string Telphone
        {
            get
            {
                return this._telphone;
            }
            set
            {
                if ((this._telphone != value))
                {
                    this.OnTelphoneChanging(value);
                    this.RaiseDataMemberChanging("Telphone");
                    this.ValidateProperty("Telphone", value);
                    this._telphone = value;
                    this.RaiseDataMemberChanged("Telphone");
                    this.OnTelphoneChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UserCode”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="工号", Order=1)]
        [Required(ErrorMessage="请输入员工工号")]
        public string UserCode
        {
            get
            {
                return this._userCode;
            }
            set
            {
                if ((this._userCode != value))
                {
                    this.OnUserCodeChanging(value);
                    this.RaiseDataMemberChanging("UserCode");
                    this.ValidateProperty("UserCode", value);
                    this._userCode = value;
                    this.RaiseDataMemberChanged("UserCode");
                    this.OnUserCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UserId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UserName”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="登陆名", Order=2)]
        [RegularExpression("^[a-zA-Z0-9_-]*$", ErrorMessage="登陆名只能由数字、字母下划线组成")]
        [Required(ErrorMessage="请输入登陆名")]
        [StringLength(32, ErrorMessage="登陆名长度在4到32个字符之间", MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UserPassword”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="密码", Order=3)]
        public string UserPassword
        {
            get
            {
                return this._userPassword;
            }
            set
            {
                if ((this._userPassword != value))
                {
                    this.OnUserPasswordChanging(value);
                    this.RaiseDataMemberChanging("UserPassword");
                    this.ValidateProperty("UserPassword", value);
                    this._userPassword = value;
                    this.RaiseDataMemberChanged("UserPassword");
                    this.OnUserPasswordChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// “UserOrgRel”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class UserOrgRel : ComplexObject
    {
        
        private int _createdBy;
        
        private DateTime _createTime;
        
        private DateTime _expireTime;
        
        private int _id;
        
        private int _identity;
        
        private bool _includeChildOrg;
        
        private int _lastUpdatedBy;
        
        private DateTime _lastUpdateTime;
        
        private Organization _organization;
        
        private string _organizationId;
        
        private DateTime _startTime;
        
        private int _userId;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCreatedByChanging(int value);
        partial void OnCreatedByChanged();
        partial void OnCreateTimeChanging(DateTime value);
        partial void OnCreateTimeChanged();
        partial void OnExpireTimeChanging(DateTime value);
        partial void OnExpireTimeChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnIncludeChildOrgChanging(bool value);
        partial void OnIncludeChildOrgChanged();
        partial void OnLastUpdatedByChanging(int value);
        partial void OnLastUpdatedByChanged();
        partial void OnLastUpdateTimeChanging(DateTime value);
        partial void OnLastUpdateTimeChanged();
        partial void OnOrganizationChanging(Organization value);
        partial void OnOrganizationChanged();
        partial void OnOrganizationIdChanging(string value);
        partial void OnOrganizationIdChanged();
        partial void OnStartTimeChanging(DateTime value);
        partial void OnStartTimeChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="UserOrgRel"/> 类的新实例。
        /// </summary>
        public UserOrgRel()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CreatedBy”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="添加人ID", Order=7)]
        public int CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                if ((this._createdBy != value))
                {
                    this.OnCreatedByChanging(value);
                    this.RaiseDataMemberChanging("CreatedBy");
                    this.ValidateProperty("CreatedBy", value);
                    this._createdBy = value;
                    this.RaiseDataMemberChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CreateTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="添加日期", Order=8)]
        public DateTime CreateTime
        {
            get
            {
                return this._createTime;
            }
            set
            {
                if ((this._createTime != value))
                {
                    this.OnCreateTimeChanging(value);
                    this.RaiseDataMemberChanging("CreateTime");
                    this.ValidateProperty("CreateTime", value);
                    this._createTime = value;
                    this.RaiseDataMemberChanged("CreateTime");
                    this.OnCreateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ExpireTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="停用日期", Order=6)]
        public DateTime ExpireTime
        {
            get
            {
                return this._expireTime;
            }
            set
            {
                if ((this._expireTime != value))
                {
                    this.OnExpireTimeChanging(value);
                    this.RaiseDataMemberChanging("ExpireTime");
                    this.ValidateProperty("ExpireTime", value);
                    this._expireTime = value;
                    this.RaiseDataMemberChanged("ExpireTime");
                    this.OnExpireTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Id”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="ID", Order=0)]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="Identity")]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“IncludeChildOrg”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="含下级组织", Order=4)]
        public bool IncludeChildOrg
        {
            get
            {
                return this._includeChildOrg;
            }
            set
            {
                if ((this._includeChildOrg != value))
                {
                    this.OnIncludeChildOrgChanging(value);
                    this.RaiseDataMemberChanging("IncludeChildOrg");
                    this.ValidateProperty("IncludeChildOrg", value);
                    this._includeChildOrg = value;
                    this.RaiseDataMemberChanged("IncludeChildOrg");
                    this.OnIncludeChildOrgChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LastUpdatedBy”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="最后更新人ID", Order=9)]
        public int LastUpdatedBy
        {
            get
            {
                return this._lastUpdatedBy;
            }
            set
            {
                if ((this._lastUpdatedBy != value))
                {
                    this.OnLastUpdatedByChanging(value);
                    this.RaiseDataMemberChanging("LastUpdatedBy");
                    this.ValidateProperty("LastUpdatedBy", value);
                    this._lastUpdatedBy = value;
                    this.RaiseDataMemberChanged("LastUpdatedBy");
                    this.OnLastUpdatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LastUpdateTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="最后更新时间", Order=10)]
        public DateTime LastUpdateTime
        {
            get
            {
                return this._lastUpdateTime;
            }
            set
            {
                if ((this._lastUpdateTime != value))
                {
                    this.OnLastUpdateTimeChanging(value);
                    this.RaiseDataMemberChanging("LastUpdateTime");
                    this.ValidateProperty("LastUpdateTime", value);
                    this._lastUpdateTime = value;
                    this.RaiseDataMemberChanged("LastUpdateTime");
                    this.OnLastUpdateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Organization”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="组织", Order=3)]
        public Organization Organization
        {
            get
            {
                return this._organization;
            }
            set
            {
                if ((this._organization != value))
                {
                    this.OnOrganizationChanging(value);
                    this.RaiseDataMemberChanging("Organization");
                    this.ValidateProperty("Organization", value);
                    this._organization = value;
                    this.RaiseDataMemberChanged("Organization");
                    this.OnOrganizationChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“OrganizationId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="组织ID", Order=2)]
        public string OrganizationId
        {
            get
            {
                return this._organizationId;
            }
            set
            {
                if ((this._organizationId != value))
                {
                    this.OnOrganizationIdChanging(value);
                    this.RaiseDataMemberChanging("OrganizationId");
                    this.ValidateProperty("OrganizationId", value);
                    this._organizationId = value;
                    this.RaiseDataMemberChanged("OrganizationId");
                    this.OnOrganizationIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“StartTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="启用日期", Order=5)]
        public DateTime StartTime
        {
            get
            {
                return this._startTime;
            }
            set
            {
                if ((this._startTime != value))
                {
                    this.OnStartTimeChanging(value);
                    this.RaiseDataMemberChanging("StartTime");
                    this.ValidateProperty("StartTime", value);
                    this._startTime = value;
                    this.RaiseDataMemberChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UserId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="用户ID", Order=1)]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// “UserRoleRel”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class UserRoleRel : ComplexObject
    {
        
        private int _createdBy;
        
        private DateTime _createTime;
        
        private DateTime _expireTime;
        
        private int _id;
        
        private int _identity;
        
        private int _lastUpdatedBy;
        
        private DateTime _lastUpdateTime;
        
        private SystemRole _role;
        
        private int _roleId;
        
        private DateTime _startTime;
        
        private int _userId;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnCreatedByChanging(int value);
        partial void OnCreatedByChanged();
        partial void OnCreateTimeChanging(DateTime value);
        partial void OnCreateTimeChanged();
        partial void OnExpireTimeChanging(DateTime value);
        partial void OnExpireTimeChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnLastUpdatedByChanging(int value);
        partial void OnLastUpdatedByChanged();
        partial void OnLastUpdateTimeChanging(DateTime value);
        partial void OnLastUpdateTimeChanged();
        partial void OnRoleChanging(SystemRole value);
        partial void OnRoleChanged();
        partial void OnRoleIdChanging(int value);
        partial void OnRoleIdChanged();
        partial void OnStartTimeChanging(DateTime value);
        partial void OnStartTimeChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="UserRoleRel"/> 类的新实例。
        /// </summary>
        public UserRoleRel()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“CreatedBy”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="添加人ID", Order=6)]
        public int CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                if ((this._createdBy != value))
                {
                    this.OnCreatedByChanging(value);
                    this.RaiseDataMemberChanging("CreatedBy");
                    this.ValidateProperty("CreatedBy", value);
                    this._createdBy = value;
                    this.RaiseDataMemberChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CreateTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="添加日期", Order=7)]
        public DateTime CreateTime
        {
            get
            {
                return this._createTime;
            }
            set
            {
                if ((this._createTime != value))
                {
                    this.OnCreateTimeChanging(value);
                    this.RaiseDataMemberChanging("CreateTime");
                    this.ValidateProperty("CreateTime", value);
                    this._createTime = value;
                    this.RaiseDataMemberChanged("CreateTime");
                    this.OnCreateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ExpireTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="停用日期", Order=5)]
        public DateTime ExpireTime
        {
            get
            {
                return this._expireTime;
            }
            set
            {
                if ((this._expireTime != value))
                {
                    this.OnExpireTimeChanging(value);
                    this.RaiseDataMemberChanging("ExpireTime");
                    this.ValidateProperty("ExpireTime", value);
                    this._expireTime = value;
                    this.RaiseDataMemberChanged("ExpireTime");
                    this.OnExpireTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Id”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="ID", Order=0)]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="Identity")]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LastUpdatedBy”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="最后更新人ID", Order=8)]
        public int LastUpdatedBy
        {
            get
            {
                return this._lastUpdatedBy;
            }
            set
            {
                if ((this._lastUpdatedBy != value))
                {
                    this.OnLastUpdatedByChanging(value);
                    this.RaiseDataMemberChanging("LastUpdatedBy");
                    this.ValidateProperty("LastUpdatedBy", value);
                    this._lastUpdatedBy = value;
                    this.RaiseDataMemberChanged("LastUpdatedBy");
                    this.OnLastUpdatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LastUpdateTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="最后更新时间", Order=9)]
        public DateTime LastUpdateTime
        {
            get
            {
                return this._lastUpdateTime;
            }
            set
            {
                if ((this._lastUpdateTime != value))
                {
                    this.OnLastUpdateTimeChanging(value);
                    this.RaiseDataMemberChanging("LastUpdateTime");
                    this.ValidateProperty("LastUpdateTime", value);
                    this._lastUpdateTime = value;
                    this.RaiseDataMemberChanged("LastUpdateTime");
                    this.OnLastUpdateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Role”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="角色", Order=3)]
        public SystemRole Role
        {
            get
            {
                return this._role;
            }
            set
            {
                if ((this._role != value))
                {
                    this.OnRoleChanging(value);
                    this.RaiseDataMemberChanging("Role");
                    this.ValidateProperty("Role", value);
                    this._role = value;
                    this.RaiseDataMemberChanged("Role");
                    this.OnRoleChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“RoleId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="角色ID", Order=2)]
        public int RoleId
        {
            get
            {
                return this._roleId;
            }
            set
            {
                if ((this._roleId != value))
                {
                    this.OnRoleIdChanging(value);
                    this.RaiseDataMemberChanging("RoleId");
                    this.ValidateProperty("RoleId", value);
                    this._roleId = value;
                    this.RaiseDataMemberChanged("RoleId");
                    this.OnRoleIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“StartTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="启用日期", Order=4)]
        public DateTime StartTime
        {
            get
            {
                return this._startTime;
            }
            set
            {
                if ((this._startTime != value))
                {
                    this.OnStartTimeChanging(value);
                    this.RaiseDataMemberChanging("StartTime");
                    this.ValidateProperty("StartTime", value);
                    this._startTime = value;
                    this.RaiseDataMemberChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“UserId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="用户ID", Order=1)]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// “WorkflowAuditStep”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class WorkflowAuditStep : ComplexObject
    {
        
        private int _auditIndex;
        
        private Organization _auditOrganization;
        
        private string _auditOrgId;
        
        private OrganizationType _auditOrgType;
        
        private SystemRole _auditRole;
        
        private int _auditRoleId;
        
        private AuditType _auditType;
        
        private SystemUser _auditUser;
        
        private int _auditUserId;
        
        private int _flowType;
        
        private int _identity;
        
        private List<JointCheckupUser> _jcUsers;
        
        private ActiveStatus _status;
        
        private int _stepId;
        
        private string _stepText;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAuditIndexChanging(int value);
        partial void OnAuditIndexChanged();
        partial void OnAuditOrganizationChanging(Organization value);
        partial void OnAuditOrganizationChanged();
        partial void OnAuditOrgIdChanging(string value);
        partial void OnAuditOrgIdChanged();
        partial void OnAuditOrgTypeChanging(OrganizationType value);
        partial void OnAuditOrgTypeChanged();
        partial void OnAuditRoleChanging(SystemRole value);
        partial void OnAuditRoleChanged();
        partial void OnAuditRoleIdChanging(int value);
        partial void OnAuditRoleIdChanged();
        partial void OnAuditTypeChanging(AuditType value);
        partial void OnAuditTypeChanged();
        partial void OnAuditUserChanging(SystemUser value);
        partial void OnAuditUserChanged();
        partial void OnAuditUserIdChanging(int value);
        partial void OnAuditUserIdChanged();
        partial void OnFlowTypeChanging(int value);
        partial void OnFlowTypeChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnJcUsersChanging(List<JointCheckupUser> value);
        partial void OnJcUsersChanged();
        partial void OnStatusChanging(ActiveStatus value);
        partial void OnStatusChanged();
        partial void OnStepIdChanging(int value);
        partial void OnStepIdChanged();
        partial void OnStepTextChanging(string value);
        partial void OnStepTextChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="WorkflowAuditStep"/> 类的新实例。
        /// </summary>
        public WorkflowAuditStep()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“AuditIndex”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="序号", Order=2)]
        public int AuditIndex
        {
            get
            {
                return this._auditIndex;
            }
            set
            {
                if ((this._auditIndex != value))
                {
                    this.OnAuditIndexChanging(value);
                    this.RaiseDataMemberChanging("AuditIndex");
                    this.ValidateProperty("AuditIndex", value);
                    this._auditIndex = value;
                    this.RaiseDataMemberChanged("AuditIndex");
                    this.OnAuditIndexChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AuditOrganization”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="审核部门", Order=6)]
        public Organization AuditOrganization
        {
            get
            {
                return this._auditOrganization;
            }
            set
            {
                if ((this._auditOrganization != value))
                {
                    this.OnAuditOrganizationChanging(value);
                    this.RaiseDataMemberChanging("AuditOrganization");
                    this.ValidateProperty("AuditOrganization", value);
                    this._auditOrganization = value;
                    this.RaiseDataMemberChanged("AuditOrganization");
                    this.OnAuditOrganizationChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AuditOrgId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="审核部门ID", Order=6)]
        public string AuditOrgId
        {
            get
            {
                return this._auditOrgId;
            }
            set
            {
                if ((this._auditOrgId != value))
                {
                    this.OnAuditOrgIdChanging(value);
                    this.RaiseDataMemberChanging("AuditOrgId");
                    this.ValidateProperty("AuditOrgId", value);
                    this._auditOrgId = value;
                    this.RaiseDataMemberChanged("AuditOrgId");
                    this.OnAuditOrgIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AuditOrgType”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="审核组织", Order=8)]
        public OrganizationType AuditOrgType
        {
            get
            {
                return this._auditOrgType;
            }
            set
            {
                if ((this._auditOrgType != value))
                {
                    this.OnAuditOrgTypeChanging(value);
                    this.RaiseDataMemberChanging("AuditOrgType");
                    this.ValidateProperty("AuditOrgType", value);
                    this._auditOrgType = value;
                    this.RaiseDataMemberChanged("AuditOrgType");
                    this.OnAuditOrgTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AuditRole”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="审核角色", Order=9)]
        public SystemRole AuditRole
        {
            get
            {
                return this._auditRole;
            }
            set
            {
                if ((this._auditRole != value))
                {
                    this.OnAuditRoleChanging(value);
                    this.RaiseDataMemberChanging("AuditRole");
                    this.ValidateProperty("AuditRole", value);
                    this._auditRole = value;
                    this.RaiseDataMemberChanged("AuditRole");
                    this.OnAuditRoleChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AuditRoleId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="审核角色ID", Order=9)]
        public int AuditRoleId
        {
            get
            {
                return this._auditRoleId;
            }
            set
            {
                if ((this._auditRoleId != value))
                {
                    this.OnAuditRoleIdChanging(value);
                    this.RaiseDataMemberChanging("AuditRoleId");
                    this.ValidateProperty("AuditRoleId", value);
                    this._auditRoleId = value;
                    this.RaiseDataMemberChanged("AuditRoleId");
                    this.OnAuditRoleIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AuditType”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="审核类型", Order=4)]
        public AuditType AuditType
        {
            get
            {
                return this._auditType;
            }
            set
            {
                if ((this._auditType != value))
                {
                    this.OnAuditTypeChanging(value);
                    this.RaiseDataMemberChanging("AuditType");
                    this.ValidateProperty("AuditType", value);
                    this._auditType = value;
                    this.RaiseDataMemberChanged("AuditType");
                    this.OnAuditTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AuditUser”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="审核用户", Order=7)]
        public SystemUser AuditUser
        {
            get
            {
                return this._auditUser;
            }
            set
            {
                if ((this._auditUser != value))
                {
                    this.OnAuditUserChanging(value);
                    this.RaiseDataMemberChanging("AuditUser");
                    this.ValidateProperty("AuditUser", value);
                    this._auditUser = value;
                    this.RaiseDataMemberChanged("AuditUser");
                    this.OnAuditUserChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“AuditUserId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="审核用户ID", Order=7)]
        public int AuditUserId
        {
            get
            {
                return this._auditUserId;
            }
            set
            {
                if ((this._auditUserId != value))
                {
                    this.OnAuditUserIdChanging(value);
                    this.RaiseDataMemberChanging("AuditUserId");
                    this.ValidateProperty("AuditUserId", value);
                    this._auditUserId = value;
                    this.RaiseDataMemberChanged("AuditUserId");
                    this.OnAuditUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FlowType”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="工作流ID", Order=3)]
        public int FlowType
        {
            get
            {
                return this._flowType;
            }
            set
            {
                if ((this._flowType != value))
                {
                    this.OnFlowTypeChanging(value);
                    this.RaiseDataMemberChanging("FlowType");
                    this.ValidateProperty("FlowType", value);
                    this._flowType = value;
                    this.RaiseDataMemberChanged("FlowType");
                    this.OnFlowTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="Identity", Order=0)]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“JcUsers”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="会审用户列表", Order=11)]
        public List<JointCheckupUser> JcUsers
        {
            get
            {
                return this._jcUsers;
            }
            set
            {
                if ((this._jcUsers != value))
                {
                    this.OnJcUsersChanging(value);
                    this.RaiseDataMemberChanging("JcUsers");
                    this.ValidateProperty("JcUsers", value);
                    this._jcUsers = value;
                    this.RaiseDataMemberChanged("JcUsers");
                    this.OnJcUsersChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Status”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="步骤状态", Order=10)]
        public ActiveStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“StepId”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="StepId", Order=1)]
        public int StepId
        {
            get
            {
                return this._stepId;
            }
            set
            {
                if ((this._stepId != value))
                {
                    this.OnStepIdChanging(value);
                    this.RaiseDataMemberChanging("StepId");
                    this.ValidateProperty("StepId", value);
                    this._stepId = value;
                    this.RaiseDataMemberChanged("StepId");
                    this.OnStepIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“StepText”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="步骤名称", Order=5)]
        public string StepText
        {
            get
            {
                return this._stepText;
            }
            set
            {
                if ((this._stepText != value))
                {
                    this.OnStepTextChanging(value);
                    this.RaiseDataMemberChanging("StepText");
                    this.ValidateProperty("StepText", value);
                    this._stepText = value;
                    this.RaiseDataMemberChanged("StepText");
                    this.OnStepTextChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// “WorkflowFileInfo”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class WorkflowFileInfo : ComplexObject
    {
        
        private int _documentId;
        
        private Document _documentInfo;
        
        private int _flowId;
        
        private int _id;
        
        private int _identity;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnDocumentIdChanging(int value);
        partial void OnDocumentIdChanged();
        partial void OnDocumentInfoChanging(Document value);
        partial void OnDocumentInfoChanged();
        partial void OnFlowIdChanging(int value);
        partial void OnFlowIdChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="WorkflowFileInfo"/> 类的新实例。
        /// </summary>
        public WorkflowFileInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“DocumentId”值。
        /// </summary>
        [DataMember()]
        public int DocumentId
        {
            get
            {
                return this._documentId;
            }
            set
            {
                if ((this._documentId != value))
                {
                    this.OnDocumentIdChanging(value);
                    this.RaiseDataMemberChanging("DocumentId");
                    this.ValidateProperty("DocumentId", value);
                    this._documentId = value;
                    this.RaiseDataMemberChanged("DocumentId");
                    this.OnDocumentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“DocumentInfo”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        public Document DocumentInfo
        {
            get
            {
                return this._documentInfo;
            }
            set
            {
                if ((this._documentInfo != value))
                {
                    this.OnDocumentInfoChanging(value);
                    this.RaiseDataMemberChanging("DocumentInfo");
                    this.ValidateProperty("DocumentInfo", value);
                    this._documentInfo = value;
                    this.RaiseDataMemberChanged("DocumentInfo");
                    this.OnDocumentInfoChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FlowId”值。
        /// </summary>
        [DataMember()]
        public int FlowId
        {
            get
            {
                return this._flowId;
            }
            set
            {
                if ((this._flowId != value))
                {
                    this.OnFlowIdChanging(value);
                    this.RaiseDataMemberChanging("FlowId");
                    this.ValidateProperty("FlowId", value);
                    this._flowId = value;
                    this.RaiseDataMemberChanged("FlowId");
                    this.OnFlowIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Id”值。
        /// </summary>
        [DataMember()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// “WorkflowInfo”类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManage.Entities")]
    public sealed partial class WorkflowInfo : ComplexObject
    {
        
        private List<WorkflowAuditStep> _auditSteps;
        
        private int _createdBy;
        
        private DateTime _createTime;
        
        private string _flowName;
        
        private int _flowType;
        
        private int _identity;
        
        private int _lastUpdatedBy;
        
        private DateTime _lastUpdateTime;
        
        private ActiveStatus _status;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAuditStepsChanging(List<WorkflowAuditStep> value);
        partial void OnAuditStepsChanged();
        partial void OnCreatedByChanging(int value);
        partial void OnCreatedByChanged();
        partial void OnCreateTimeChanging(DateTime value);
        partial void OnCreateTimeChanged();
        partial void OnFlowNameChanging(string value);
        partial void OnFlowNameChanged();
        partial void OnFlowTypeChanging(int value);
        partial void OnFlowTypeChanged();
        partial void OnIdentityChanging(int value);
        partial void OnIdentityChanged();
        partial void OnLastUpdatedByChanging(int value);
        partial void OnLastUpdatedByChanged();
        partial void OnLastUpdateTimeChanging(DateTime value);
        partial void OnLastUpdateTimeChanged();
        partial void OnStatusChanging(ActiveStatus value);
        partial void OnStatusChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="WorkflowInfo"/> 类的新实例。
        /// </summary>
        public WorkflowInfo()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“AuditSteps”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="审批步骤", Order=7)]
        public List<WorkflowAuditStep> AuditSteps
        {
            get
            {
                return this._auditSteps;
            }
            set
            {
                if ((this._auditSteps != value))
                {
                    this.OnAuditStepsChanging(value);
                    this.RaiseDataMemberChanging("AuditSteps");
                    this.ValidateProperty("AuditSteps", value);
                    this._auditSteps = value;
                    this.RaiseDataMemberChanged("AuditSteps");
                    this.OnAuditStepsChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CreatedBy”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="添加人ID", Order=3)]
        public int CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                if ((this._createdBy != value))
                {
                    this.OnCreatedByChanging(value);
                    this.RaiseDataMemberChanging("CreatedBy");
                    this.ValidateProperty("CreatedBy", value);
                    this._createdBy = value;
                    this.RaiseDataMemberChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“CreateTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="添加日期", Order=4)]
        public DateTime CreateTime
        {
            get
            {
                return this._createTime;
            }
            set
            {
                if ((this._createTime != value))
                {
                    this.OnCreateTimeChanging(value);
                    this.RaiseDataMemberChanging("CreateTime");
                    this.ValidateProperty("CreateTime", value);
                    this._createTime = value;
                    this.RaiseDataMemberChanged("CreateTime");
                    this.OnCreateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FlowName”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="名称", Order=2)]
        public string FlowName
        {
            get
            {
                return this._flowName;
            }
            set
            {
                if ((this._flowName != value))
                {
                    this.OnFlowNameChanging(value);
                    this.RaiseDataMemberChanging("FlowName");
                    this.ValidateProperty("FlowName", value);
                    this._flowName = value;
                    this.RaiseDataMemberChanged("FlowName");
                    this.OnFlowNameChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FlowType”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="ID", Order=1)]
        public int FlowType
        {
            get
            {
                return this._flowType;
            }
            set
            {
                if ((this._flowType != value))
                {
                    this.OnFlowTypeChanging(value);
                    this.RaiseDataMemberChanging("FlowType");
                    this.ValidateProperty("FlowType", value);
                    this._flowType = value;
                    this.RaiseDataMemberChanged("FlowType");
                    this.OnFlowTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Identity”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="Identity", Order=0)]
        public int Identity
        {
            get
            {
                return this._identity;
            }
            set
            {
                if ((this._identity != value))
                {
                    this.OnIdentityChanging(value);
                    this.RaiseDataMemberChanging("Identity");
                    this.ValidateProperty("Identity", value);
                    this._identity = value;
                    this.RaiseDataMemberChanged("Identity");
                    this.OnIdentityChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LastUpdatedBy”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="最后更新人ID", Order=5)]
        public int LastUpdatedBy
        {
            get
            {
                return this._lastUpdatedBy;
            }
            set
            {
                if ((this._lastUpdatedBy != value))
                {
                    this.OnLastUpdatedByChanging(value);
                    this.RaiseDataMemberChanging("LastUpdatedBy");
                    this.ValidateProperty("LastUpdatedBy", value);
                    this._lastUpdatedBy = value;
                    this.RaiseDataMemberChanged("LastUpdatedBy");
                    this.OnLastUpdatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“LastUpdateTime”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false, Name="最后更新时间", Order=6)]
        public DateTime LastUpdateTime
        {
            get
            {
                return this._lastUpdateTime;
            }
            set
            {
                if ((this._lastUpdateTime != value))
                {
                    this.OnLastUpdateTimeChanging(value);
                    this.RaiseDataMemberChanging("LastUpdateTime");
                    this.ValidateProperty("LastUpdateTime", value);
                    this._lastUpdateTime = value;
                    this.RaiseDataMemberChanged("LastUpdateTime");
                    this.OnLastUpdateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“Status”值。
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=true, Name="状态", Order=8)]
        public ActiveStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
    }
}
namespace DocumentManageService.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using DocumentManage.Entities;
    
    
    /// <summary>
    /// 与“DocumentDomainService”DomainService 相对应的 DomainContext。
    /// </summary>
    public sealed partial class DocumentDomainContext : DomainContext
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="DocumentDomainContext"/> 类的新实例。
        /// </summary>
        public DocumentDomainContext() : 
                this(new WebDomainClient<IDocumentDomainServiceContract>(new Uri("DocumentManageService-Web-DocumentDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// 用指定的服务 URI 初始化 <see cref="DocumentDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="serviceUri">DocumentDomainService 服务 URI。</param>
        public DocumentDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IDocumentDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// 用指定的 <paramref name="domainClient"/> 初始化 <see cref="DocumentDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="domainClient">要用于此 DomainContext 的 DomainClient 实例。</param>
        public DocumentDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“BackToParentFolder”方法。
        /// </summary>
        /// <param name="folderId">此操作的“folderId”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileSystemEntity>> BackToParentFolder(int folderId, int userId, Action<InvokeOperation<List<FileSystemEntity>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("folderId", folderId);
            parameters.Add("userId", userId);
            this.ValidateMethod("BackToParentFolder", parameters);
            return ((InvokeOperation<List<FileSystemEntity>>)(this.InvokeOperation("BackToParentFolder", typeof(List<FileSystemEntity>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“BackToParentFolder”方法。
        /// </summary>
        /// <param name="folderId">此操作的“folderId”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileSystemEntity>> BackToParentFolder(int folderId, int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("folderId", folderId);
            parameters.Add("userId", userId);
            this.ValidateMethod("BackToParentFolder", parameters);
            return ((InvokeOperation<List<FileSystemEntity>>)(this.InvokeOperation("BackToParentFolder", typeof(List<FileSystemEntity>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CheckAndCreateFolder”方法。
        /// </summary>
        /// <param name="docInfo">此操作的“docInfo”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation CheckAndCreateFolder(Document docInfo, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("docInfo", docInfo);
            this.ValidateMethod("CheckAndCreateFolder", parameters);
            return this.InvokeOperation("CheckAndCreateFolder", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CheckAndCreateFolder”方法。
        /// </summary>
        /// <param name="docInfo">此操作的“docInfo”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation CheckAndCreateFolder(Document docInfo)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("docInfo", docInfo);
            this.ValidateMethod("CheckAndCreateFolder", parameters);
            return this.InvokeOperation("CheckAndCreateFolder", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CreateFolder”方法。
        /// </summary>
        /// <param name="folder">此操作的“folder”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> CreateFolder(DocumentFolder folder, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("folder", folder);
            this.ValidateMethod("CreateFolder", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("CreateFolder", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CreateFolder”方法。
        /// </summary>
        /// <param name="folder">此操作的“folder”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> CreateFolder(DocumentFolder folder)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("folder", folder);
            this.ValidateMethod("CreateFolder", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("CreateFolder", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DeleteFile”方法。
        /// </summary>
        /// <param name="fileId">此操作的“fileId”参数的值。</param>
        /// <param name="revision">此操作的“revision”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> DeleteFile(Guid fileId, int revision, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fileId", fileId);
            parameters.Add("revision", revision);
            this.ValidateMethod("DeleteFile", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("DeleteFile", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DeleteFile”方法。
        /// </summary>
        /// <param name="fileId">此操作的“fileId”参数的值。</param>
        /// <param name="revision">此操作的“revision”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> DeleteFile(Guid fileId, int revision)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fileId", fileId);
            parameters.Add("revision", revision);
            this.ValidateMethod("DeleteFile", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("DeleteFile", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DeleteFolder”方法。
        /// </summary>
        /// <param name="folderId">此操作的“folderId”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> DeleteFolder(int folderId, int userId, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("folderId", folderId);
            parameters.Add("userId", userId);
            this.ValidateMethod("DeleteFolder", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("DeleteFolder", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DeleteFolder”方法。
        /// </summary>
        /// <param name="folderId">此操作的“folderId”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> DeleteFolder(int folderId, int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("folderId", folderId);
            parameters.Add("userId", userId);
            this.ValidateMethod("DeleteFolder", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("DeleteFolder", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DownloadFile”方法。
        /// </summary>
        /// <param name="fileId">此操作的“fileId”参数的值。</param>
        /// <param name="revision">此操作的“revision”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<Document> DownloadFile(Guid fileId, int revision, int userId, Action<InvokeOperation<Document>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fileId", fileId);
            parameters.Add("revision", revision);
            parameters.Add("userId", userId);
            this.ValidateMethod("DownloadFile", parameters);
            return ((InvokeOperation<Document>)(this.InvokeOperation("DownloadFile", typeof(Document), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DownloadFile”方法。
        /// </summary>
        /// <param name="fileId">此操作的“fileId”参数的值。</param>
        /// <param name="revision">此操作的“revision”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<Document> DownloadFile(Guid fileId, int revision, int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fileId", fileId);
            parameters.Add("revision", revision);
            parameters.Add("userId", userId);
            this.ValidateMethod("DownloadFile", parameters);
            return ((InvokeOperation<Document>)(this.InvokeOperation("DownloadFile", typeof(Document), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DownloadLatestFile”方法。
        /// </summary>
        /// <param name="fileId">此操作的“fileId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<Document> DownloadLatestFile(Guid fileId, Action<InvokeOperation<Document>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fileId", fileId);
            this.ValidateMethod("DownloadLatestFile", parameters);
            return ((InvokeOperation<Document>)(this.InvokeOperation("DownloadLatestFile", typeof(Document), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DownloadLatestFile”方法。
        /// </summary>
        /// <param name="fileId">此操作的“fileId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<Document> DownloadLatestFile(Guid fileId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fileId", fileId);
            this.ValidateMethod("DownloadLatestFile", parameters);
            return ((InvokeOperation<Document>)(this.InvokeOperation("DownloadLatestFile", typeof(Document), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetFileSystemEntityByFolder”方法。
        /// </summary>
        /// <param name="folderId">此操作的“folderId”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileSystemEntity>> GetFileSystemEntityByFolder(int folderId, int userId, Action<InvokeOperation<List<FileSystemEntity>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("folderId", folderId);
            parameters.Add("userId", userId);
            this.ValidateMethod("GetFileSystemEntityByFolder", parameters);
            return ((InvokeOperation<List<FileSystemEntity>>)(this.InvokeOperation("GetFileSystemEntityByFolder", typeof(List<FileSystemEntity>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetFileSystemEntityByFolder”方法。
        /// </summary>
        /// <param name="folderId">此操作的“folderId”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileSystemEntity>> GetFileSystemEntityByFolder(int folderId, int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("folderId", folderId);
            parameters.Add("userId", userId);
            this.ValidateMethod("GetFileSystemEntityByFolder", parameters);
            return ((InvokeOperation<List<FileSystemEntity>>)(this.InvokeOperation("GetFileSystemEntityByFolder", typeof(List<FileSystemEntity>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetFileSystemEntityByOrg”方法。
        /// </summary>
        /// <param name="orgId">此操作的“orgId”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileSystemEntity>> GetFileSystemEntityByOrg(string orgId, int userId, Action<InvokeOperation<List<FileSystemEntity>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("orgId", orgId);
            parameters.Add("userId", userId);
            this.ValidateMethod("GetFileSystemEntityByOrg", parameters);
            return ((InvokeOperation<List<FileSystemEntity>>)(this.InvokeOperation("GetFileSystemEntityByOrg", typeof(List<FileSystemEntity>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetFileSystemEntityByOrg”方法。
        /// </summary>
        /// <param name="orgId">此操作的“orgId”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileSystemEntity>> GetFileSystemEntityByOrg(string orgId, int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("orgId", orgId);
            parameters.Add("userId", userId);
            this.ValidateMethod("GetFileSystemEntityByOrg", parameters);
            return ((InvokeOperation<List<FileSystemEntity>>)(this.InvokeOperation("GetFileSystemEntityByOrg", typeof(List<FileSystemEntity>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetFolder”方法。
        /// </summary>
        /// <param name="folderId">此操作的“folderId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<DocumentFolder> GetFolder(int folderId, Action<InvokeOperation<DocumentFolder>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("folderId", folderId);
            this.ValidateMethod("GetFolder", parameters);
            return ((InvokeOperation<DocumentFolder>)(this.InvokeOperation("GetFolder", typeof(DocumentFolder), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetFolder”方法。
        /// </summary>
        /// <param name="folderId">此操作的“folderId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<DocumentFolder> GetFolder(int folderId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("folderId", folderId);
            this.ValidateMethod("GetFolder", parameters);
            return ((InvokeOperation<DocumentFolder>)(this.InvokeOperation("GetFolder", typeof(DocumentFolder), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetLatestDocument”方法。
        /// </summary>
        /// <param name="fileId">此操作的“fileId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<Document> GetLatestDocument(Guid fileId, Action<InvokeOperation<Document>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fileId", fileId);
            this.ValidateMethod("GetLatestDocument", parameters);
            return ((InvokeOperation<Document>)(this.InvokeOperation("GetLatestDocument", typeof(Document), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetLatestDocument”方法。
        /// </summary>
        /// <param name="fileId">此操作的“fileId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<Document> GetLatestDocument(Guid fileId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fileId", fileId);
            this.ValidateMethod("GetLatestDocument", parameters);
            return ((InvokeOperation<Document>)(this.InvokeOperation("GetLatestDocument", typeof(Document), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetReleaseHistory”方法。
        /// </summary>
        /// <param name="fse">此操作的“fse”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<DocumentRelease>> GetReleaseHistory(FileSystemEntity fse, Action<InvokeOperation<List<DocumentRelease>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fse", fse);
            this.ValidateMethod("GetReleaseHistory", parameters);
            return ((InvokeOperation<List<DocumentRelease>>)(this.InvokeOperation("GetReleaseHistory", typeof(List<DocumentRelease>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetReleaseHistory”方法。
        /// </summary>
        /// <param name="fse">此操作的“fse”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<DocumentRelease>> GetReleaseHistory(FileSystemEntity fse)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fse", fse);
            this.ValidateMethod("GetReleaseHistory", parameters);
            return ((InvokeOperation<List<DocumentRelease>>)(this.InvokeOperation("GetReleaseHistory", typeof(List<DocumentRelease>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUserFolders”方法。
        /// </summary>
        /// <param name="orgId">此操作的“orgId”参数的值。</param>
        /// <param name="folderId">此操作的“folderId”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileSystemEntity>> GetUserFolders(string orgId, int folderId, int userId, Action<InvokeOperation<List<FileSystemEntity>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("orgId", orgId);
            parameters.Add("folderId", folderId);
            parameters.Add("userId", userId);
            this.ValidateMethod("GetUserFolders", parameters);
            return ((InvokeOperation<List<FileSystemEntity>>)(this.InvokeOperation("GetUserFolders", typeof(List<FileSystemEntity>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUserFolders”方法。
        /// </summary>
        /// <param name="orgId">此操作的“orgId”参数的值。</param>
        /// <param name="folderId">此操作的“folderId”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileSystemEntity>> GetUserFolders(string orgId, int folderId, int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("orgId", orgId);
            parameters.Add("folderId", folderId);
            parameters.Add("userId", userId);
            this.ValidateMethod("GetUserFolders", parameters);
            return ((InvokeOperation<List<FileSystemEntity>>)(this.InvokeOperation("GetUserFolders", typeof(List<FileSystemEntity>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“ReleaseDocument”方法。
        /// </summary>
        /// <param name="dr">此操作的“dr”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> ReleaseDocument(DocumentRelease dr, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dr", dr);
            this.ValidateMethod("ReleaseDocument", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("ReleaseDocument", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“ReleaseDocument”方法。
        /// </summary>
        /// <param name="dr">此操作的“dr”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> ReleaseDocument(DocumentRelease dr)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dr", dr);
            this.ValidateMethod("ReleaseDocument", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("ReleaseDocument", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“RemoveDocumentRelease”方法。
        /// </summary>
        /// <param name="dr">此操作的“dr”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> RemoveDocumentRelease(DocumentRelease dr, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dr", dr);
            this.ValidateMethod("RemoveDocumentRelease", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("RemoveDocumentRelease", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“RemoveDocumentRelease”方法。
        /// </summary>
        /// <param name="dr">此操作的“dr”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> RemoveDocumentRelease(DocumentRelease dr)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("dr", dr);
            this.ValidateMethod("RemoveDocumentRelease", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("RemoveDocumentRelease", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“RenameFolder”方法。
        /// </summary>
        /// <param name="folderId">此操作的“folderId”参数的值。</param>
        /// <param name="newName">此操作的“newName”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> RenameFolder(int folderId, string newName, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("folderId", folderId);
            parameters.Add("newName", newName);
            this.ValidateMethod("RenameFolder", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("RenameFolder", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“RenameFolder”方法。
        /// </summary>
        /// <param name="folderId">此操作的“folderId”参数的值。</param>
        /// <param name="newName">此操作的“newName”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> RenameFolder(int folderId, string newName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("folderId", folderId);
            parameters.Add("newName", newName);
            this.ValidateMethod("RenameFolder", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("RenameFolder", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“SearchFile”方法。
        /// </summary>
        /// <param name="searchKey">此操作的“searchKey”参数的值。</param>
        /// <param name="orgId">此操作的“orgId”参数的值。</param>
        /// <param name="folderId">此操作的“folderId”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileSystemEntity>> SearchFile(string searchKey, string orgId, int folderId, int userId, Action<InvokeOperation<List<FileSystemEntity>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("searchKey", searchKey);
            parameters.Add("orgId", orgId);
            parameters.Add("folderId", folderId);
            parameters.Add("userId", userId);
            this.ValidateMethod("SearchFile", parameters);
            return ((InvokeOperation<List<FileSystemEntity>>)(this.InvokeOperation("SearchFile", typeof(List<FileSystemEntity>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“SearchFile”方法。
        /// </summary>
        /// <param name="searchKey">此操作的“searchKey”参数的值。</param>
        /// <param name="orgId">此操作的“orgId”参数的值。</param>
        /// <param name="folderId">此操作的“folderId”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileSystemEntity>> SearchFile(string searchKey, string orgId, int folderId, int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("searchKey", searchKey);
            parameters.Add("orgId", orgId);
            parameters.Add("folderId", folderId);
            parameters.Add("userId", userId);
            this.ValidateMethod("SearchFile", parameters);
            return ((InvokeOperation<List<FileSystemEntity>>)(this.InvokeOperation("SearchFile", typeof(List<FileSystemEntity>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“UploadFile”方法。
        /// </summary>
        /// <param name="doc">此操作的“doc”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<Document> UploadFile(Document doc, Action<InvokeOperation<Document>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("doc", doc);
            this.ValidateMethod("UploadFile", parameters);
            return ((InvokeOperation<Document>)(this.InvokeOperation("UploadFile", typeof(Document), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“UploadFile”方法。
        /// </summary>
        /// <param name="doc">此操作的“doc”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<Document> UploadFile(Document doc)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("doc", doc);
            this.ValidateMethod("UploadFile", parameters);
            return ((InvokeOperation<Document>)(this.InvokeOperation("UploadFile", typeof(Document), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 为此 DomainContext 的 EntitySets 创建一个新 EntityContainer。
        /// </summary>
        /// <returns>一个新容器实例。</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new DocumentDomainContextEntityContainer();
        }
        
        /// <summary>
        /// 用于“DocumentDomainService”DomainService 的 Service 协定。　
        /// </summary>
        [ServiceContract()]
        public interface IDocumentDomainServiceContract
        {
            
            /// <summary>
            /// 异步调用“BackToParentFolder”操作。
            /// </summary>
            /// <param name="folderId">此操作的“folderId”参数的值。</param>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/BackToParentFolderDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/BackToParentFolder", ReplyAction="http://tempuri.org/DocumentDomainService/BackToParentFolderResponse")]
            IAsyncResult BeginBackToParentFolder(int folderId, int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginBackToParentFolder”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginBackToParentFolder”返回的 IAsyncResult。</param>
            /// <returns>从“BackToParentFolder”操作返回的“List`1”。</returns>
            List<FileSystemEntity> EndBackToParentFolder(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“CheckAndCreateFolder”操作。
            /// </summary>
            /// <param name="docInfo">此操作的“docInfo”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/CheckAndCreateFolderDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/CheckAndCreateFolder", ReplyAction="http://tempuri.org/DocumentDomainService/CheckAndCreateFolderResponse")]
            IAsyncResult BeginCheckAndCreateFolder(Document docInfo, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginCheckAndCreateFolder”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginCheckAndCreateFolder”返回的 IAsyncResult。</param>
            void EndCheckAndCreateFolder(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“CreateFolder”操作。
            /// </summary>
            /// <param name="folder">此操作的“folder”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/CreateFolderDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/CreateFolder", ReplyAction="http://tempuri.org/DocumentDomainService/CreateFolderResponse")]
            IAsyncResult BeginCreateFolder(DocumentFolder folder, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginCreateFolder”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginCreateFolder”返回的 IAsyncResult。</param>
            /// <returns>从“CreateFolder”操作返回的“Int32”。</returns>
            int EndCreateFolder(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“DeleteFile”操作。
            /// </summary>
            /// <param name="fileId">此操作的“fileId”参数的值。</param>
            /// <param name="revision">此操作的“revision”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/DeleteFileDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/DeleteFile", ReplyAction="http://tempuri.org/DocumentDomainService/DeleteFileResponse")]
            IAsyncResult BeginDeleteFile(Guid fileId, int revision, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginDeleteFile”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginDeleteFile”返回的 IAsyncResult。</param>
            /// <returns>从“DeleteFile”操作返回的“Int32”。</returns>
            int EndDeleteFile(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“DeleteFolder”操作。
            /// </summary>
            /// <param name="folderId">此操作的“folderId”参数的值。</param>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/DeleteFolderDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/DeleteFolder", ReplyAction="http://tempuri.org/DocumentDomainService/DeleteFolderResponse")]
            IAsyncResult BeginDeleteFolder(int folderId, int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginDeleteFolder”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginDeleteFolder”返回的 IAsyncResult。</param>
            /// <returns>从“DeleteFolder”操作返回的“Int32”。</returns>
            int EndDeleteFolder(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“DownloadFile”操作。
            /// </summary>
            /// <param name="fileId">此操作的“fileId”参数的值。</param>
            /// <param name="revision">此操作的“revision”参数的值。</param>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/DownloadFileDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/DownloadFile", ReplyAction="http://tempuri.org/DocumentDomainService/DownloadFileResponse")]
            IAsyncResult BeginDownloadFile(Guid fileId, int revision, int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginDownloadFile”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginDownloadFile”返回的 IAsyncResult。</param>
            /// <returns>从“DownloadFile”操作返回的“Document”。</returns>
            Document EndDownloadFile(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“DownloadLatestFile”操作。
            /// </summary>
            /// <param name="fileId">此操作的“fileId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/DownloadLatestFileDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/DownloadLatestFile", ReplyAction="http://tempuri.org/DocumentDomainService/DownloadLatestFileResponse")]
            IAsyncResult BeginDownloadLatestFile(Guid fileId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginDownloadLatestFile”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginDownloadLatestFile”返回的 IAsyncResult。</param>
            /// <returns>从“DownloadLatestFile”操作返回的“Document”。</returns>
            Document EndDownloadLatestFile(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetFileSystemEntityByFolder”操作。
            /// </summary>
            /// <param name="folderId">此操作的“folderId”参数的值。</param>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/GetFileSystemEntityByFolderDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/GetFileSystemEntityByFolder", ReplyAction="http://tempuri.org/DocumentDomainService/GetFileSystemEntityByFolderResponse")]
            IAsyncResult BeginGetFileSystemEntityByFolder(int folderId, int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetFileSystemEntityByFolder”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetFileSystemEntityByFolder”返回的 IAsyncResult。</param>
            /// <returns>从“GetFileSystemEntityByFolder”操作返回的“List`1”。</returns>
            List<FileSystemEntity> EndGetFileSystemEntityByFolder(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetFileSystemEntityByOrg”操作。
            /// </summary>
            /// <param name="orgId">此操作的“orgId”参数的值。</param>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/GetFileSystemEntityByOrgDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/GetFileSystemEntityByOrg", ReplyAction="http://tempuri.org/DocumentDomainService/GetFileSystemEntityByOrgResponse")]
            IAsyncResult BeginGetFileSystemEntityByOrg(string orgId, int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetFileSystemEntityByOrg”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetFileSystemEntityByOrg”返回的 IAsyncResult。</param>
            /// <returns>从“GetFileSystemEntityByOrg”操作返回的“List`1”。</returns>
            List<FileSystemEntity> EndGetFileSystemEntityByOrg(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetFolder”操作。
            /// </summary>
            /// <param name="folderId">此操作的“folderId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/GetFolderDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/GetFolder", ReplyAction="http://tempuri.org/DocumentDomainService/GetFolderResponse")]
            IAsyncResult BeginGetFolder(int folderId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetFolder”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetFolder”返回的 IAsyncResult。</param>
            /// <returns>从“GetFolder”操作返回的“DocumentFolder”。</returns>
            DocumentFolder EndGetFolder(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetLatestDocument”操作。
            /// </summary>
            /// <param name="fileId">此操作的“fileId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/GetLatestDocumentDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/GetLatestDocument", ReplyAction="http://tempuri.org/DocumentDomainService/GetLatestDocumentResponse")]
            IAsyncResult BeginGetLatestDocument(Guid fileId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetLatestDocument”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetLatestDocument”返回的 IAsyncResult。</param>
            /// <returns>从“GetLatestDocument”操作返回的“Document”。</returns>
            Document EndGetLatestDocument(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetReleaseHistory”操作。
            /// </summary>
            /// <param name="fse">此操作的“fse”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/GetReleaseHistoryDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/GetReleaseHistory", ReplyAction="http://tempuri.org/DocumentDomainService/GetReleaseHistoryResponse")]
            IAsyncResult BeginGetReleaseHistory(FileSystemEntity fse, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetReleaseHistory”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetReleaseHistory”返回的 IAsyncResult。</param>
            /// <returns>从“GetReleaseHistory”操作返回的“List`1”。</returns>
            List<DocumentRelease> EndGetReleaseHistory(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUserFolders”操作。
            /// </summary>
            /// <param name="orgId">此操作的“orgId”参数的值。</param>
            /// <param name="folderId">此操作的“folderId”参数的值。</param>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/GetUserFoldersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/GetUserFolders", ReplyAction="http://tempuri.org/DocumentDomainService/GetUserFoldersResponse")]
            IAsyncResult BeginGetUserFolders(string orgId, int folderId, int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUserFolders”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUserFolders”返回的 IAsyncResult。</param>
            /// <returns>从“GetUserFolders”操作返回的“List`1”。</returns>
            List<FileSystemEntity> EndGetUserFolders(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“ReleaseDocument”操作。
            /// </summary>
            /// <param name="dr">此操作的“dr”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/ReleaseDocumentDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/ReleaseDocument", ReplyAction="http://tempuri.org/DocumentDomainService/ReleaseDocumentResponse")]
            IAsyncResult BeginReleaseDocument(DocumentRelease dr, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginReleaseDocument”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginReleaseDocument”返回的 IAsyncResult。</param>
            /// <returns>从“ReleaseDocument”操作返回的“Int32”。</returns>
            int EndReleaseDocument(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“RemoveDocumentRelease”操作。
            /// </summary>
            /// <param name="dr">此操作的“dr”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/RemoveDocumentReleaseDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/RemoveDocumentRelease", ReplyAction="http://tempuri.org/DocumentDomainService/RemoveDocumentReleaseResponse")]
            IAsyncResult BeginRemoveDocumentRelease(DocumentRelease dr, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginRemoveDocumentRelease”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginRemoveDocumentRelease”返回的 IAsyncResult。</param>
            /// <returns>从“RemoveDocumentRelease”操作返回的“Int32”。</returns>
            int EndRemoveDocumentRelease(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“RenameFolder”操作。
            /// </summary>
            /// <param name="folderId">此操作的“folderId”参数的值。</param>
            /// <param name="newName">此操作的“newName”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/RenameFolderDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/RenameFolder", ReplyAction="http://tempuri.org/DocumentDomainService/RenameFolderResponse")]
            IAsyncResult BeginRenameFolder(int folderId, string newName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginRenameFolder”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginRenameFolder”返回的 IAsyncResult。</param>
            /// <returns>从“RenameFolder”操作返回的“Int32”。</returns>
            int EndRenameFolder(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“SearchFile”操作。
            /// </summary>
            /// <param name="searchKey">此操作的“searchKey”参数的值。</param>
            /// <param name="orgId">此操作的“orgId”参数的值。</param>
            /// <param name="folderId">此操作的“folderId”参数的值。</param>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/SearchFileDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/SearchFile", ReplyAction="http://tempuri.org/DocumentDomainService/SearchFileResponse")]
            IAsyncResult BeginSearchFile(string searchKey, string orgId, int folderId, int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginSearchFile”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginSearchFile”返回的 IAsyncResult。</param>
            /// <returns>从“SearchFile”操作返回的“List`1”。</returns>
            List<FileSystemEntity> EndSearchFile(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“UploadFile”操作。
            /// </summary>
            /// <param name="doc">此操作的“doc”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DocumentDomainService/UploadFileDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DocumentDomainService/UploadFile", ReplyAction="http://tempuri.org/DocumentDomainService/UploadFileResponse")]
            IAsyncResult BeginUploadFile(Document doc, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginUploadFile”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginUploadFile”返回的 IAsyncResult。</param>
            /// <returns>从“UploadFile”操作返回的“Document”。</returns>
            Document EndUploadFile(IAsyncResult result);
        }
        
        internal sealed class DocumentDomainContextEntityContainer : EntityContainer
        {
            
            public DocumentDomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// 与“FileDescDomainService”DomainService 相对应的 DomainContext。
    /// </summary>
    public sealed partial class FileDescDomainContext : DomainContext
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="FileDescDomainContext"/> 类的新实例。
        /// </summary>
        public FileDescDomainContext() : 
                this(new WebDomainClient<IFileDescDomainServiceContract>(new Uri("DocumentManageService-Web-FileDescDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// 用指定的服务 URI 初始化 <see cref="FileDescDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="serviceUri">FileDescDomainService 服务 URI。</param>
        public FileDescDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IFileDescDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// 用指定的 <paramref name="domainClient"/> 初始化 <see cref="FileDescDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="domainClient">要用于此 DomainContext 的 DomainClient 实例。</param>
        public FileDescDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CreateTemplate”方法。
        /// </summary>
        /// <param name="template">此操作的“template”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> CreateTemplate(FileDescTemplate template, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("template", template);
            this.ValidateMethod("CreateTemplate", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("CreateTemplate", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CreateTemplate”方法。
        /// </summary>
        /// <param name="template">此操作的“template”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> CreateTemplate(FileDescTemplate template)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("template", template);
            this.ValidateMethod("CreateTemplate", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("CreateTemplate", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetActiveTemplateByType”方法。
        /// </summary>
        /// <param name="type">此操作的“type”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileDescTemplate>> GetActiveTemplateByType(DocumentType type, Action<InvokeOperation<List<FileDescTemplate>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("type", type);
            this.ValidateMethod("GetActiveTemplateByType", parameters);
            return ((InvokeOperation<List<FileDescTemplate>>)(this.InvokeOperation("GetActiveTemplateByType", typeof(List<FileDescTemplate>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetActiveTemplateByType”方法。
        /// </summary>
        /// <param name="type">此操作的“type”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileDescTemplate>> GetActiveTemplateByType(DocumentType type)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("type", type);
            this.ValidateMethod("GetActiveTemplateByType", parameters);
            return ((InvokeOperation<List<FileDescTemplate>>)(this.InvokeOperation("GetActiveTemplateByType", typeof(List<FileDescTemplate>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetAllTemplates”方法。
        /// </summary>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileDescTemplate>> GetAllTemplates(Action<InvokeOperation<List<FileDescTemplate>>> callback, object userState)
        {
            this.ValidateMethod("GetAllTemplates", null);
            return ((InvokeOperation<List<FileDescTemplate>>)(this.InvokeOperation("GetAllTemplates", typeof(List<FileDescTemplate>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetAllTemplates”方法。
        /// </summary>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileDescTemplate>> GetAllTemplates()
        {
            this.ValidateMethod("GetAllTemplates", null);
            return ((InvokeOperation<List<FileDescTemplate>>)(this.InvokeOperation("GetAllTemplates", typeof(List<FileDescTemplate>), null, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetDescTemplateByType”方法。
        /// </summary>
        /// <param name="type">此操作的“type”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileDescTemplate>> GetDescTemplateByType(DocumentType type, Action<InvokeOperation<List<FileDescTemplate>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("type", type);
            this.ValidateMethod("GetDescTemplateByType", parameters);
            return ((InvokeOperation<List<FileDescTemplate>>)(this.InvokeOperation("GetDescTemplateByType", typeof(List<FileDescTemplate>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetDescTemplateByType”方法。
        /// </summary>
        /// <param name="type">此操作的“type”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FileDescTemplate>> GetDescTemplateByType(DocumentType type)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("type", type);
            this.ValidateMethod("GetDescTemplateByType", parameters);
            return ((InvokeOperation<List<FileDescTemplate>>)(this.InvokeOperation("GetDescTemplateByType", typeof(List<FileDescTemplate>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“UpdateTemplate”方法。
        /// </summary>
        /// <param name="template">此操作的“template”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> UpdateTemplate(FileDescTemplate template, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("template", template);
            this.ValidateMethod("UpdateTemplate", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("UpdateTemplate", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“UpdateTemplate”方法。
        /// </summary>
        /// <param name="template">此操作的“template”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> UpdateTemplate(FileDescTemplate template)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("template", template);
            this.ValidateMethod("UpdateTemplate", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("UpdateTemplate", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 为此 DomainContext 的 EntitySets 创建一个新 EntityContainer。
        /// </summary>
        /// <returns>一个新容器实例。</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new FileDescDomainContextEntityContainer();
        }
        
        /// <summary>
        /// 用于“FileDescDomainService”DomainService 的 Service 协定。　
        /// </summary>
        [ServiceContract()]
        public interface IFileDescDomainServiceContract
        {
            
            /// <summary>
            /// 异步调用“CreateTemplate”操作。
            /// </summary>
            /// <param name="template">此操作的“template”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FileDescDomainService/CreateTemplateDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FileDescDomainService/CreateTemplate", ReplyAction="http://tempuri.org/FileDescDomainService/CreateTemplateResponse")]
            IAsyncResult BeginCreateTemplate(FileDescTemplate template, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginCreateTemplate”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginCreateTemplate”返回的 IAsyncResult。</param>
            /// <returns>从“CreateTemplate”操作返回的“Int32”。</returns>
            int EndCreateTemplate(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetActiveTemplateByType”操作。
            /// </summary>
            /// <param name="type">此操作的“type”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FileDescDomainService/GetActiveTemplateByTypeDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FileDescDomainService/GetActiveTemplateByType", ReplyAction="http://tempuri.org/FileDescDomainService/GetActiveTemplateByTypeResponse")]
            IAsyncResult BeginGetActiveTemplateByType(DocumentType type, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetActiveTemplateByType”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetActiveTemplateByType”返回的 IAsyncResult。</param>
            /// <returns>从“GetActiveTemplateByType”操作返回的“List`1”。</returns>
            List<FileDescTemplate> EndGetActiveTemplateByType(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetAllTemplates”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FileDescDomainService/GetAllTemplatesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FileDescDomainService/GetAllTemplates", ReplyAction="http://tempuri.org/FileDescDomainService/GetAllTemplatesResponse")]
            IAsyncResult BeginGetAllTemplates(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetAllTemplates”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetAllTemplates”返回的 IAsyncResult。</param>
            /// <returns>从“GetAllTemplates”操作返回的“List`1”。</returns>
            List<FileDescTemplate> EndGetAllTemplates(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetDescTemplateByType”操作。
            /// </summary>
            /// <param name="type">此操作的“type”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FileDescDomainService/GetDescTemplateByTypeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FileDescDomainService/GetDescTemplateByType", ReplyAction="http://tempuri.org/FileDescDomainService/GetDescTemplateByTypeResponse")]
            IAsyncResult BeginGetDescTemplateByType(DocumentType type, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetDescTemplateByType”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetDescTemplateByType”返回的 IAsyncResult。</param>
            /// <returns>从“GetDescTemplateByType”操作返回的“List`1”。</returns>
            List<FileDescTemplate> EndGetDescTemplateByType(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“UpdateTemplate”操作。
            /// </summary>
            /// <param name="template">此操作的“template”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FileDescDomainService/UpdateTemplateDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FileDescDomainService/UpdateTemplate", ReplyAction="http://tempuri.org/FileDescDomainService/UpdateTemplateResponse")]
            IAsyncResult BeginUpdateTemplate(FileDescTemplate template, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginUpdateTemplate”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginUpdateTemplate”返回的 IAsyncResult。</param>
            /// <returns>从“UpdateTemplate”操作返回的“Int32”。</returns>
            int EndUpdateTemplate(IAsyncResult result);
        }
        
        internal sealed class FileDescDomainContextEntityContainer : EntityContainer
        {
            
            public FileDescDomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// 与“OrganizationDomainService”DomainService 相对应的 DomainContext。
    /// </summary>
    public sealed partial class OrganizationDomainContext : DomainContext
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="OrganizationDomainContext"/> 类的新实例。
        /// </summary>
        public OrganizationDomainContext() : 
                this(new WebDomainClient<IOrganizationDomainServiceContract>(new Uri("DocumentManageService-Web-OrganizationDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// 用指定的服务 URI 初始化 <see cref="OrganizationDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="serviceUri">OrganizationDomainService 服务 URI。</param>
        public OrganizationDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IOrganizationDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// 用指定的 <paramref name="domainClient"/> 初始化 <see cref="OrganizationDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="domainClient">要用于此 DomainContext 的 DomainClient 实例。</param>
        public OrganizationDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetOrganizationInfo”方法。
        /// </summary>
        /// <param name="orgId">此操作的“orgId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<Organization> GetOrganizationInfo(string orgId, Action<InvokeOperation<Organization>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("orgId", orgId);
            this.ValidateMethod("GetOrganizationInfo", parameters);
            return ((InvokeOperation<Organization>)(this.InvokeOperation("GetOrganizationInfo", typeof(Organization), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetOrganizationInfo”方法。
        /// </summary>
        /// <param name="orgId">此操作的“orgId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<Organization> GetOrganizationInfo(string orgId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("orgId", orgId);
            this.ValidateMethod("GetOrganizationInfo", parameters);
            return ((InvokeOperation<Organization>)(this.InvokeOperation("GetOrganizationInfo", typeof(Organization), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetOrganizationTree”方法。
        /// </summary>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<Organization> GetOrganizationTree(Action<InvokeOperation<Organization>> callback, object userState)
        {
            this.ValidateMethod("GetOrganizationTree", null);
            return ((InvokeOperation<Organization>)(this.InvokeOperation("GetOrganizationTree", typeof(Organization), null, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetOrganizationTree”方法。
        /// </summary>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<Organization> GetOrganizationTree()
        {
            this.ValidateMethod("GetOrganizationTree", null);
            return ((InvokeOperation<Organization>)(this.InvokeOperation("GetOrganizationTree", typeof(Organization), null, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“SaveOrganizationInfo”方法。
        /// </summary>
        /// <param name="org">此操作的“org”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> SaveOrganizationInfo(Organization org, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("org", org);
            this.ValidateMethod("SaveOrganizationInfo", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("SaveOrganizationInfo", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“SaveOrganizationInfo”方法。
        /// </summary>
        /// <param name="org">此操作的“org”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> SaveOrganizationInfo(Organization org)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("org", org);
            this.ValidateMethod("SaveOrganizationInfo", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("SaveOrganizationInfo", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“SearchOrganization”方法。
        /// </summary>
        /// <param name="strKey">此操作的“strKey”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<Organization>> SearchOrganization(string strKey, Action<InvokeOperation<List<Organization>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("strKey", strKey);
            this.ValidateMethod("SearchOrganization", parameters);
            return ((InvokeOperation<List<Organization>>)(this.InvokeOperation("SearchOrganization", typeof(List<Organization>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“SearchOrganization”方法。
        /// </summary>
        /// <param name="strKey">此操作的“strKey”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<Organization>> SearchOrganization(string strKey)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("strKey", strKey);
            this.ValidateMethod("SearchOrganization", parameters);
            return ((InvokeOperation<List<Organization>>)(this.InvokeOperation("SearchOrganization", typeof(List<Organization>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 为此 DomainContext 的 EntitySets 创建一个新 EntityContainer。
        /// </summary>
        /// <returns>一个新容器实例。</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new OrganizationDomainContextEntityContainer();
        }
        
        /// <summary>
        /// 用于“OrganizationDomainService”DomainService 的 Service 协定。　
        /// </summary>
        [ServiceContract()]
        public interface IOrganizationDomainServiceContract
        {
            
            /// <summary>
            /// 异步调用“GetOrganizationInfo”操作。
            /// </summary>
            /// <param name="orgId">此操作的“orgId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrganizationDomainService/GetOrganizationInfoDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrganizationDomainService/GetOrganizationInfo", ReplyAction="http://tempuri.org/OrganizationDomainService/GetOrganizationInfoResponse")]
            IAsyncResult BeginGetOrganizationInfo(string orgId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetOrganizationInfo”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetOrganizationInfo”返回的 IAsyncResult。</param>
            /// <returns>从“GetOrganizationInfo”操作返回的“Organization”。</returns>
            Organization EndGetOrganizationInfo(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetOrganizationTree”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrganizationDomainService/GetOrganizationTreeDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrganizationDomainService/GetOrganizationTree", ReplyAction="http://tempuri.org/OrganizationDomainService/GetOrganizationTreeResponse")]
            IAsyncResult BeginGetOrganizationTree(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetOrganizationTree”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetOrganizationTree”返回的 IAsyncResult。</param>
            /// <returns>从“GetOrganizationTree”操作返回的“Organization”。</returns>
            Organization EndGetOrganizationTree(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“SaveOrganizationInfo”操作。
            /// </summary>
            /// <param name="org">此操作的“org”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrganizationDomainService/SaveOrganizationInfoDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrganizationDomainService/SaveOrganizationInfo", ReplyAction="http://tempuri.org/OrganizationDomainService/SaveOrganizationInfoResponse")]
            IAsyncResult BeginSaveOrganizationInfo(Organization org, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginSaveOrganizationInfo”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginSaveOrganizationInfo”返回的 IAsyncResult。</param>
            /// <returns>从“SaveOrganizationInfo”操作返回的“Int32”。</returns>
            int EndSaveOrganizationInfo(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“SearchOrganization”操作。
            /// </summary>
            /// <param name="strKey">此操作的“strKey”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/OrganizationDomainService/SearchOrganizationDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/OrganizationDomainService/SearchOrganization", ReplyAction="http://tempuri.org/OrganizationDomainService/SearchOrganizationResponse")]
            IAsyncResult BeginSearchOrganization(string strKey, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginSearchOrganization”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginSearchOrganization”返回的 IAsyncResult。</param>
            /// <returns>从“SearchOrganization”操作返回的“List`1”。</returns>
            List<Organization> EndSearchOrganization(IAsyncResult result);
        }
        
        internal sealed class OrganizationDomainContextEntityContainer : EntityContainer
        {
            
            public OrganizationDomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// 与“SysMessageDomainService”DomainService 相对应的 DomainContext。
    /// </summary>
    public sealed partial class SysMessageDomainContext : DomainContext
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SysMessageDomainContext"/> 类的新实例。
        /// </summary>
        public SysMessageDomainContext() : 
                this(new WebDomainClient<ISysMessageDomainServiceContract>(new Uri("DocumentManageService-Web-SysMessageDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// 用指定的服务 URI 初始化 <see cref="SysMessageDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="serviceUri">SysMessageDomainService 服务 URI。</param>
        public SysMessageDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ISysMessageDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// 用指定的 <paramref name="domainClient"/> 初始化 <see cref="SysMessageDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="domainClient">要用于此 DomainContext 的 DomainClient 实例。</param>
        public SysMessageDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CreateMessage”方法。
        /// </summary>
        /// <param name="msg">此操作的“msg”参数的值。</param>
        /// <param name="orgs">此操作的“orgs”参数的值。</param>
        /// <param name="users">此操作的“users”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> CreateMessage(SystemMessage msg, List<SystemMessageOrg> orgs, List<SystemMessageUser> users, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("msg", msg);
            parameters.Add("orgs", orgs);
            parameters.Add("users", users);
            this.ValidateMethod("CreateMessage", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("CreateMessage", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CreateMessage”方法。
        /// </summary>
        /// <param name="msg">此操作的“msg”参数的值。</param>
        /// <param name="orgs">此操作的“orgs”参数的值。</param>
        /// <param name="users">此操作的“users”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> CreateMessage(SystemMessage msg, List<SystemMessageOrg> orgs, List<SystemMessageUser> users)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("msg", msg);
            parameters.Add("orgs", orgs);
            parameters.Add("users", users);
            this.ValidateMethod("CreateMessage", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("CreateMessage", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetMessageInfo”方法。
        /// </summary>
        /// <param name="messageId">此操作的“messageId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<SystemMessage> GetMessageInfo(int messageId, Action<InvokeOperation<SystemMessage>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("messageId", messageId);
            this.ValidateMethod("GetMessageInfo", parameters);
            return ((InvokeOperation<SystemMessage>)(this.InvokeOperation("GetMessageInfo", typeof(SystemMessage), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetMessageInfo”方法。
        /// </summary>
        /// <param name="messageId">此操作的“messageId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<SystemMessage> GetMessageInfo(int messageId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("messageId", messageId);
            this.ValidateMethod("GetMessageInfo", parameters);
            return ((InvokeOperation<SystemMessage>)(this.InvokeOperation("GetMessageInfo", typeof(SystemMessage), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetMessageReleaseInfo”方法。
        /// </summary>
        /// <param name="messageId">此操作的“messageId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<IEnumerable<string>> GetMessageReleaseInfo(int messageId, Action<InvokeOperation<IEnumerable<string>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("messageId", messageId);
            this.ValidateMethod("GetMessageReleaseInfo", parameters);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetMessageReleaseInfo", typeof(IEnumerable<string>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetMessageReleaseInfo”方法。
        /// </summary>
        /// <param name="messageId">此操作的“messageId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<IEnumerable<string>> GetMessageReleaseInfo(int messageId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("messageId", messageId);
            this.ValidateMethod("GetMessageReleaseInfo", parameters);
            return ((InvokeOperation<IEnumerable<string>>)(this.InvokeOperation("GetMessageReleaseInfo", typeof(IEnumerable<string>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetPopupMessageList”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemMessage>> GetPopupMessageList(int userId, Action<InvokeOperation<List<SystemMessage>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("GetPopupMessageList", parameters);
            return ((InvokeOperation<List<SystemMessage>>)(this.InvokeOperation("GetPopupMessageList", typeof(List<SystemMessage>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetPopupMessageList”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemMessage>> GetPopupMessageList(int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("GetPopupMessageList", parameters);
            return ((InvokeOperation<List<SystemMessage>>)(this.InvokeOperation("GetPopupMessageList", typeof(List<SystemMessage>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUserMessagesList”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemMessage>> GetUserMessagesList(int userId, Action<InvokeOperation<List<SystemMessage>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("GetUserMessagesList", parameters);
            return ((InvokeOperation<List<SystemMessage>>)(this.InvokeOperation("GetUserMessagesList", typeof(List<SystemMessage>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUserMessagesList”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemMessage>> GetUserMessagesList(int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("GetUserMessagesList", parameters);
            return ((InvokeOperation<List<SystemMessage>>)(this.InvokeOperation("GetUserMessagesList", typeof(List<SystemMessage>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“UserReviewSysMessage”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="messageId">此操作的“messageId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation UserReviewSysMessage(int userId, int messageId, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            parameters.Add("messageId", messageId);
            this.ValidateMethod("UserReviewSysMessage", parameters);
            return this.InvokeOperation("UserReviewSysMessage", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“UserReviewSysMessage”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="messageId">此操作的“messageId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation UserReviewSysMessage(int userId, int messageId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            parameters.Add("messageId", messageId);
            this.ValidateMethod("UserReviewSysMessage", parameters);
            return this.InvokeOperation("UserReviewSysMessage", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// 为此 DomainContext 的 EntitySets 创建一个新 EntityContainer。
        /// </summary>
        /// <returns>一个新容器实例。</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SysMessageDomainContextEntityContainer();
        }
        
        /// <summary>
        /// 用于“SysMessageDomainService”DomainService 的 Service 协定。　
        /// </summary>
        [ServiceContract()]
        public interface ISysMessageDomainServiceContract
        {
            
            /// <summary>
            /// 异步调用“CreateMessage”操作。
            /// </summary>
            /// <param name="msg">此操作的“msg”参数的值。</param>
            /// <param name="orgs">此操作的“orgs”参数的值。</param>
            /// <param name="users">此操作的“users”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SysMessageDomainService/CreateMessageDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SysMessageDomainService/CreateMessage", ReplyAction="http://tempuri.org/SysMessageDomainService/CreateMessageResponse")]
            IAsyncResult BeginCreateMessage(SystemMessage msg, List<SystemMessageOrg> orgs, List<SystemMessageUser> users, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginCreateMessage”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginCreateMessage”返回的 IAsyncResult。</param>
            /// <returns>从“CreateMessage”操作返回的“Int32”。</returns>
            int EndCreateMessage(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetMessageInfo”操作。
            /// </summary>
            /// <param name="messageId">此操作的“messageId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SysMessageDomainService/GetMessageInfoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SysMessageDomainService/GetMessageInfo", ReplyAction="http://tempuri.org/SysMessageDomainService/GetMessageInfoResponse")]
            IAsyncResult BeginGetMessageInfo(int messageId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetMessageInfo”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetMessageInfo”返回的 IAsyncResult。</param>
            /// <returns>从“GetMessageInfo”操作返回的“SystemMessage”。</returns>
            SystemMessage EndGetMessageInfo(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetMessageReleaseInfo”操作。
            /// </summary>
            /// <param name="messageId">此操作的“messageId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SysMessageDomainService/GetMessageReleaseInfoDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SysMessageDomainService/GetMessageReleaseInfo", ReplyAction="http://tempuri.org/SysMessageDomainService/GetMessageReleaseInfoResponse")]
            IAsyncResult BeginGetMessageReleaseInfo(int messageId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetMessageReleaseInfo”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetMessageReleaseInfo”返回的 IAsyncResult。</param>
            /// <returns>从“GetMessageReleaseInfo”操作返回的“IEnumerable`1”。</returns>
            IEnumerable<string> EndGetMessageReleaseInfo(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetPopupMessageList”操作。
            /// </summary>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SysMessageDomainService/GetPopupMessageListDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SysMessageDomainService/GetPopupMessageList", ReplyAction="http://tempuri.org/SysMessageDomainService/GetPopupMessageListResponse")]
            IAsyncResult BeginGetPopupMessageList(int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetPopupMessageList”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetPopupMessageList”返回的 IAsyncResult。</param>
            /// <returns>从“GetPopupMessageList”操作返回的“List`1”。</returns>
            List<SystemMessage> EndGetPopupMessageList(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUserMessagesList”操作。
            /// </summary>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SysMessageDomainService/GetUserMessagesListDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SysMessageDomainService/GetUserMessagesList", ReplyAction="http://tempuri.org/SysMessageDomainService/GetUserMessagesListResponse")]
            IAsyncResult BeginGetUserMessagesList(int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUserMessagesList”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUserMessagesList”返回的 IAsyncResult。</param>
            /// <returns>从“GetUserMessagesList”操作返回的“List`1”。</returns>
            List<SystemMessage> EndGetUserMessagesList(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“UserReviewSysMessage”操作。
            /// </summary>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="messageId">此操作的“messageId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SysMessageDomainService/UserReviewSysMessageDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SysMessageDomainService/UserReviewSysMessage", ReplyAction="http://tempuri.org/SysMessageDomainService/UserReviewSysMessageResponse")]
            IAsyncResult BeginUserReviewSysMessage(int userId, int messageId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginUserReviewSysMessage”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginUserReviewSysMessage”返回的 IAsyncResult。</param>
            void EndUserReviewSysMessage(IAsyncResult result);
        }
        
        internal sealed class SysMessageDomainContextEntityContainer : EntityContainer
        {
            
            public SysMessageDomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// 与“SystemConfigDomainService”DomainService 相对应的 DomainContext。
    /// </summary>
    public sealed partial class SystemConfigDomainContext : DomainContext
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SystemConfigDomainContext"/> 类的新实例。
        /// </summary>
        public SystemConfigDomainContext() : 
                this(new WebDomainClient<ISystemConfigDomainServiceContract>(new Uri("DocumentManageService-Web-SystemConfigDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// 用指定的服务 URI 初始化 <see cref="SystemConfigDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="serviceUri">SystemConfigDomainService 服务 URI。</param>
        public SystemConfigDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ISystemConfigDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// 用指定的 <paramref name="domainClient"/> 初始化 <see cref="SystemConfigDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="domainClient">要用于此 DomainContext 的 DomainClient 实例。</param>
        public SystemConfigDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetSystemConfig”方法。
        /// </summary>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<SystemConfig> GetSystemConfig(Action<InvokeOperation<SystemConfig>> callback, object userState)
        {
            this.ValidateMethod("GetSystemConfig", null);
            return ((InvokeOperation<SystemConfig>)(this.InvokeOperation("GetSystemConfig", typeof(SystemConfig), null, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetSystemConfig”方法。
        /// </summary>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<SystemConfig> GetSystemConfig()
        {
            this.ValidateMethod("GetSystemConfig", null);
            return ((InvokeOperation<SystemConfig>)(this.InvokeOperation("GetSystemConfig", typeof(SystemConfig), null, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“SaveSystemConfig”方法。
        /// </summary>
        /// <param name="config">此操作的“config”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> SaveSystemConfig(SystemConfig config, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("config", config);
            this.ValidateMethod("SaveSystemConfig", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("SaveSystemConfig", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“SaveSystemConfig”方法。
        /// </summary>
        /// <param name="config">此操作的“config”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> SaveSystemConfig(SystemConfig config)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("config", config);
            this.ValidateMethod("SaveSystemConfig", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("SaveSystemConfig", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 为此 DomainContext 的 EntitySets 创建一个新 EntityContainer。
        /// </summary>
        /// <returns>一个新容器实例。</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SystemConfigDomainContextEntityContainer();
        }
        
        /// <summary>
        /// 用于“SystemConfigDomainService”DomainService 的 Service 协定。　
        /// </summary>
        [ServiceContract()]
        public interface ISystemConfigDomainServiceContract
        {
            
            /// <summary>
            /// 异步调用“GetSystemConfig”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemConfigDomainService/GetSystemConfigDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemConfigDomainService/GetSystemConfig", ReplyAction="http://tempuri.org/SystemConfigDomainService/GetSystemConfigResponse")]
            IAsyncResult BeginGetSystemConfig(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSystemConfig”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSystemConfig”返回的 IAsyncResult。</param>
            /// <returns>从“GetSystemConfig”操作返回的“SystemConfig”。</returns>
            SystemConfig EndGetSystemConfig(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“SaveSystemConfig”操作。
            /// </summary>
            /// <param name="config">此操作的“config”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemConfigDomainService/SaveSystemConfigDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemConfigDomainService/SaveSystemConfig", ReplyAction="http://tempuri.org/SystemConfigDomainService/SaveSystemConfigResponse")]
            IAsyncResult BeginSaveSystemConfig(SystemConfig config, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginSaveSystemConfig”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginSaveSystemConfig”返回的 IAsyncResult。</param>
            /// <returns>从“SaveSystemConfig”操作返回的“Int32”。</returns>
            int EndSaveSystemConfig(IAsyncResult result);
        }
        
        internal sealed class SystemConfigDomainContextEntityContainer : EntityContainer
        {
            
            public SystemConfigDomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// 与“SystemModuleDomainService”DomainService 相对应的 DomainContext。
    /// </summary>
    public sealed partial class SystemModuleDomainContext : DomainContext
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SystemModuleDomainContext"/> 类的新实例。
        /// </summary>
        public SystemModuleDomainContext() : 
                this(new WebDomainClient<ISystemModuleDomainServiceContract>(new Uri("DocumentManageService-Web-SystemModuleDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// 用指定的服务 URI 初始化 <see cref="SystemModuleDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="serviceUri">SystemModuleDomainService 服务 URI。</param>
        public SystemModuleDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ISystemModuleDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// 用指定的 <paramref name="domainClient"/> 初始化 <see cref="SystemModuleDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="domainClient">要用于此 DomainContext 的 DomainClient 实例。</param>
        public SystemModuleDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetSubModuleList”方法。
        /// </summary>
        /// <param name="parentId">此操作的“parentId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemModule>> GetSubModuleList(string parentId, Action<InvokeOperation<List<SystemModule>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("parentId", parentId);
            this.ValidateMethod("GetSubModuleList", parameters);
            return ((InvokeOperation<List<SystemModule>>)(this.InvokeOperation("GetSubModuleList", typeof(List<SystemModule>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetSubModuleList”方法。
        /// </summary>
        /// <param name="parentId">此操作的“parentId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemModule>> GetSubModuleList(string parentId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("parentId", parentId);
            this.ValidateMethod("GetSubModuleList", parameters);
            return ((InvokeOperation<List<SystemModule>>)(this.InvokeOperation("GetSubModuleList", typeof(List<SystemModule>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetSystemModuleTree”方法。
        /// </summary>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<SystemModule> GetSystemModuleTree(Action<InvokeOperation<SystemModule>> callback, object userState)
        {
            this.ValidateMethod("GetSystemModuleTree", null);
            return ((InvokeOperation<SystemModule>)(this.InvokeOperation("GetSystemModuleTree", typeof(SystemModule), null, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetSystemModuleTree”方法。
        /// </summary>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<SystemModule> GetSystemModuleTree()
        {
            this.ValidateMethod("GetSystemModuleTree", null);
            return ((InvokeOperation<SystemModule>)(this.InvokeOperation("GetSystemModuleTree", typeof(SystemModule), null, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetTopModuleList”方法。
        /// </summary>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemModule>> GetTopModuleList(Action<InvokeOperation<List<SystemModule>>> callback, object userState)
        {
            this.ValidateMethod("GetTopModuleList", null);
            return ((InvokeOperation<List<SystemModule>>)(this.InvokeOperation("GetTopModuleList", typeof(List<SystemModule>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetTopModuleList”方法。
        /// </summary>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemModule>> GetTopModuleList()
        {
            this.ValidateMethod("GetTopModuleList", null);
            return ((InvokeOperation<List<SystemModule>>)(this.InvokeOperation("GetTopModuleList", typeof(List<SystemModule>), null, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUserModuleList”方法。
        /// </summary>
        /// <param name="parendId">此操作的“parendId”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemModule>> GetUserModuleList(string parendId, int userId, Action<InvokeOperation<List<SystemModule>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("parendId", parendId);
            parameters.Add("userId", userId);
            this.ValidateMethod("GetUserModuleList", parameters);
            return ((InvokeOperation<List<SystemModule>>)(this.InvokeOperation("GetUserModuleList", typeof(List<SystemModule>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUserModuleList”方法。
        /// </summary>
        /// <param name="parendId">此操作的“parendId”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemModule>> GetUserModuleList(string parendId, int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("parendId", parendId);
            parameters.Add("userId", userId);
            this.ValidateMethod("GetUserModuleList", parameters);
            return ((InvokeOperation<List<SystemModule>>)(this.InvokeOperation("GetUserModuleList", typeof(List<SystemModule>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 为此 DomainContext 的 EntitySets 创建一个新 EntityContainer。
        /// </summary>
        /// <returns>一个新容器实例。</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SystemModuleDomainContextEntityContainer();
        }
        
        /// <summary>
        /// 用于“SystemModuleDomainService”DomainService 的 Service 协定。　
        /// </summary>
        [ServiceContract()]
        public interface ISystemModuleDomainServiceContract
        {
            
            /// <summary>
            /// 异步调用“GetSubModuleList”操作。
            /// </summary>
            /// <param name="parentId">此操作的“parentId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemModuleDomainService/GetSubModuleListDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemModuleDomainService/GetSubModuleList", ReplyAction="http://tempuri.org/SystemModuleDomainService/GetSubModuleListResponse")]
            IAsyncResult BeginGetSubModuleList(string parentId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSubModuleList”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSubModuleList”返回的 IAsyncResult。</param>
            /// <returns>从“GetSubModuleList”操作返回的“List`1”。</returns>
            List<SystemModule> EndGetSubModuleList(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetSystemModuleTree”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemModuleDomainService/GetSystemModuleTreeDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemModuleDomainService/GetSystemModuleTree", ReplyAction="http://tempuri.org/SystemModuleDomainService/GetSystemModuleTreeResponse")]
            IAsyncResult BeginGetSystemModuleTree(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetSystemModuleTree”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetSystemModuleTree”返回的 IAsyncResult。</param>
            /// <returns>从“GetSystemModuleTree”操作返回的“SystemModule”。</returns>
            SystemModule EndGetSystemModuleTree(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetTopModuleList”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemModuleDomainService/GetTopModuleListDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemModuleDomainService/GetTopModuleList", ReplyAction="http://tempuri.org/SystemModuleDomainService/GetTopModuleListResponse")]
            IAsyncResult BeginGetTopModuleList(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetTopModuleList”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetTopModuleList”返回的 IAsyncResult。</param>
            /// <returns>从“GetTopModuleList”操作返回的“List`1”。</returns>
            List<SystemModule> EndGetTopModuleList(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUserModuleList”操作。
            /// </summary>
            /// <param name="parendId">此操作的“parendId”参数的值。</param>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemModuleDomainService/GetUserModuleListDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemModuleDomainService/GetUserModuleList", ReplyAction="http://tempuri.org/SystemModuleDomainService/GetUserModuleListResponse")]
            IAsyncResult BeginGetUserModuleList(string parendId, int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUserModuleList”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUserModuleList”返回的 IAsyncResult。</param>
            /// <returns>从“GetUserModuleList”操作返回的“List`1”。</returns>
            List<SystemModule> EndGetUserModuleList(IAsyncResult result);
        }
        
        internal sealed class SystemModuleDomainContextEntityContainer : EntityContainer
        {
            
            public SystemModuleDomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// 与“SystemRoleDomainService”DomainService 相对应的 DomainContext。
    /// </summary>
    public sealed partial class SystemRoleDomainContext : DomainContext
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SystemRoleDomainContext"/> 类的新实例。
        /// </summary>
        public SystemRoleDomainContext() : 
                this(new WebDomainClient<ISystemRoleDomainServiceContract>(new Uri("DocumentManageService-Web-SystemRoleDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// 用指定的服务 URI 初始化 <see cref="SystemRoleDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="serviceUri">SystemRoleDomainService 服务 URI。</param>
        public SystemRoleDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ISystemRoleDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// 用指定的 <paramref name="domainClient"/> 初始化 <see cref="SystemRoleDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="domainClient">要用于此 DomainContext 的 DomainClient 实例。</param>
        public SystemRoleDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CreateRole”方法。
        /// </summary>
        /// <param name="roleInfo">此操作的“roleInfo”参数的值。</param>
        /// <param name="modules">此操作的“modules”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> CreateRole(SystemRole roleInfo, List<RoleModuleRel> modules, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleInfo", roleInfo);
            parameters.Add("modules", modules);
            this.ValidateMethod("CreateRole", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("CreateRole", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CreateRole”方法。
        /// </summary>
        /// <param name="roleInfo">此操作的“roleInfo”参数的值。</param>
        /// <param name="modules">此操作的“modules”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> CreateRole(SystemRole roleInfo, List<RoleModuleRel> modules)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleInfo", roleInfo);
            parameters.Add("modules", modules);
            this.ValidateMethod("CreateRole", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("CreateRole", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DeleteRole”方法。
        /// </summary>
        /// <param name="role">此操作的“role”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> DeleteRole(SystemRole role, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("role", role);
            this.ValidateMethod("DeleteRole", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("DeleteRole", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DeleteRole”方法。
        /// </summary>
        /// <param name="role">此操作的“role”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> DeleteRole(SystemRole role)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("role", role);
            this.ValidateMethod("DeleteRole", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("DeleteRole", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetAllRoles”方法。
        /// </summary>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemRole>> GetAllRoles(Action<InvokeOperation<List<SystemRole>>> callback, object userState)
        {
            this.ValidateMethod("GetAllRoles", null);
            return ((InvokeOperation<List<SystemRole>>)(this.InvokeOperation("GetAllRoles", typeof(List<SystemRole>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetAllRoles”方法。
        /// </summary>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemRole>> GetAllRoles()
        {
            this.ValidateMethod("GetAllRoles", null);
            return ((InvokeOperation<List<SystemRole>>)(this.InvokeOperation("GetAllRoles", typeof(List<SystemRole>), null, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetRoleModules”方法。
        /// </summary>
        /// <param name="roleId">此操作的“roleId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<RoleModuleRel>> GetRoleModules(int roleId, Action<InvokeOperation<List<RoleModuleRel>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetRoleModules", parameters);
            return ((InvokeOperation<List<RoleModuleRel>>)(this.InvokeOperation("GetRoleModules", typeof(List<RoleModuleRel>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetRoleModules”方法。
        /// </summary>
        /// <param name="roleId">此操作的“roleId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<RoleModuleRel>> GetRoleModules(int roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleId", roleId);
            this.ValidateMethod("GetRoleModules", parameters);
            return ((InvokeOperation<List<RoleModuleRel>>)(this.InvokeOperation("GetRoleModules", typeof(List<RoleModuleRel>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetRolesByPage”方法。
        /// </summary>
        /// <param name="pageSize">此操作的“pageSize”参数的值。</param>
        /// <param name="pageIndex">此操作的“pageIndex”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemRole>> GetRolesByPage(int pageSize, int pageIndex, Action<InvokeOperation<List<SystemRole>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("pageSize", pageSize);
            parameters.Add("pageIndex", pageIndex);
            this.ValidateMethod("GetRolesByPage", parameters);
            return ((InvokeOperation<List<SystemRole>>)(this.InvokeOperation("GetRolesByPage", typeof(List<SystemRole>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetRolesByPage”方法。
        /// </summary>
        /// <param name="pageSize">此操作的“pageSize”参数的值。</param>
        /// <param name="pageIndex">此操作的“pageIndex”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemRole>> GetRolesByPage(int pageSize, int pageIndex)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("pageSize", pageSize);
            parameters.Add("pageIndex", pageIndex);
            this.ValidateMethod("GetRolesByPage", parameters);
            return ((InvokeOperation<List<SystemRole>>)(this.InvokeOperation("GetRolesByPage", typeof(List<SystemRole>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetRolesCount”方法。
        /// </summary>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> GetRolesCount(Action<InvokeOperation<int>> callback, object userState)
        {
            this.ValidateMethod("GetRolesCount", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetRolesCount", typeof(int), null, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetRolesCount”方法。
        /// </summary>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> GetRolesCount()
        {
            this.ValidateMethod("GetRolesCount", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetRolesCount", typeof(int), null, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“HasRoleCodeUsed”方法。
        /// </summary>
        /// <param name="code">此操作的“code”参数的值。</param>
        /// <param name="roleId">此操作的“roleId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<bool> HasRoleCodeUsed(string code, int roleId, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("code", code);
            parameters.Add("roleId", roleId);
            this.ValidateMethod("HasRoleCodeUsed", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("HasRoleCodeUsed", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“HasRoleCodeUsed”方法。
        /// </summary>
        /// <param name="code">此操作的“code”参数的值。</param>
        /// <param name="roleId">此操作的“roleId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<bool> HasRoleCodeUsed(string code, int roleId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("code", code);
            parameters.Add("roleId", roleId);
            this.ValidateMethod("HasRoleCodeUsed", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("HasRoleCodeUsed", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“SearchRole”方法。
        /// </summary>
        /// <param name="searchKey">此操作的“searchKey”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemRole>> SearchRole(string searchKey, Action<InvokeOperation<List<SystemRole>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("searchKey", searchKey);
            this.ValidateMethod("SearchRole", parameters);
            return ((InvokeOperation<List<SystemRole>>)(this.InvokeOperation("SearchRole", typeof(List<SystemRole>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“SearchRole”方法。
        /// </summary>
        /// <param name="searchKey">此操作的“searchKey”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemRole>> SearchRole(string searchKey)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("searchKey", searchKey);
            this.ValidateMethod("SearchRole", parameters);
            return ((InvokeOperation<List<SystemRole>>)(this.InvokeOperation("SearchRole", typeof(List<SystemRole>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“UpdateRole”方法。
        /// </summary>
        /// <param name="roleInfo">此操作的“roleInfo”参数的值。</param>
        /// <param name="modules">此操作的“modules”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> UpdateRole(SystemRole roleInfo, List<RoleModuleRel> modules, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleInfo", roleInfo);
            parameters.Add("modules", modules);
            this.ValidateMethod("UpdateRole", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("UpdateRole", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“UpdateRole”方法。
        /// </summary>
        /// <param name="roleInfo">此操作的“roleInfo”参数的值。</param>
        /// <param name="modules">此操作的“modules”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> UpdateRole(SystemRole roleInfo, List<RoleModuleRel> modules)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("roleInfo", roleInfo);
            parameters.Add("modules", modules);
            this.ValidateMethod("UpdateRole", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("UpdateRole", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 为此 DomainContext 的 EntitySets 创建一个新 EntityContainer。
        /// </summary>
        /// <returns>一个新容器实例。</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SystemRoleDomainContextEntityContainer();
        }
        
        /// <summary>
        /// 用于“SystemRoleDomainService”DomainService 的 Service 协定。　
        /// </summary>
        [ServiceContract()]
        public interface ISystemRoleDomainServiceContract
        {
            
            /// <summary>
            /// 异步调用“CreateRole”操作。
            /// </summary>
            /// <param name="roleInfo">此操作的“roleInfo”参数的值。</param>
            /// <param name="modules">此操作的“modules”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemRoleDomainService/CreateRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemRoleDomainService/CreateRole", ReplyAction="http://tempuri.org/SystemRoleDomainService/CreateRoleResponse")]
            IAsyncResult BeginCreateRole(SystemRole roleInfo, List<RoleModuleRel> modules, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginCreateRole”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginCreateRole”返回的 IAsyncResult。</param>
            /// <returns>从“CreateRole”操作返回的“Int32”。</returns>
            int EndCreateRole(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“DeleteRole”操作。
            /// </summary>
            /// <param name="role">此操作的“role”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemRoleDomainService/DeleteRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemRoleDomainService/DeleteRole", ReplyAction="http://tempuri.org/SystemRoleDomainService/DeleteRoleResponse")]
            IAsyncResult BeginDeleteRole(SystemRole role, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginDeleteRole”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginDeleteRole”返回的 IAsyncResult。</param>
            /// <returns>从“DeleteRole”操作返回的“Int32”。</returns>
            int EndDeleteRole(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetAllRoles”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemRoleDomainService/GetAllRolesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemRoleDomainService/GetAllRoles", ReplyAction="http://tempuri.org/SystemRoleDomainService/GetAllRolesResponse")]
            IAsyncResult BeginGetAllRoles(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetAllRoles”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetAllRoles”返回的 IAsyncResult。</param>
            /// <returns>从“GetAllRoles”操作返回的“List`1”。</returns>
            List<SystemRole> EndGetAllRoles(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetRoleModules”操作。
            /// </summary>
            /// <param name="roleId">此操作的“roleId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemRoleDomainService/GetRoleModulesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemRoleDomainService/GetRoleModules", ReplyAction="http://tempuri.org/SystemRoleDomainService/GetRoleModulesResponse")]
            IAsyncResult BeginGetRoleModules(int roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetRoleModules”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetRoleModules”返回的 IAsyncResult。</param>
            /// <returns>从“GetRoleModules”操作返回的“List`1”。</returns>
            List<RoleModuleRel> EndGetRoleModules(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetRolesByPage”操作。
            /// </summary>
            /// <param name="pageSize">此操作的“pageSize”参数的值。</param>
            /// <param name="pageIndex">此操作的“pageIndex”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemRoleDomainService/GetRolesByPageDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemRoleDomainService/GetRolesByPage", ReplyAction="http://tempuri.org/SystemRoleDomainService/GetRolesByPageResponse")]
            IAsyncResult BeginGetRolesByPage(int pageSize, int pageIndex, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetRolesByPage”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetRolesByPage”返回的 IAsyncResult。</param>
            /// <returns>从“GetRolesByPage”操作返回的“List`1”。</returns>
            List<SystemRole> EndGetRolesByPage(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetRolesCount”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemRoleDomainService/GetRolesCountDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemRoleDomainService/GetRolesCount", ReplyAction="http://tempuri.org/SystemRoleDomainService/GetRolesCountResponse")]
            IAsyncResult BeginGetRolesCount(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetRolesCount”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetRolesCount”返回的 IAsyncResult。</param>
            /// <returns>从“GetRolesCount”操作返回的“Int32”。</returns>
            int EndGetRolesCount(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“HasRoleCodeUsed”操作。
            /// </summary>
            /// <param name="code">此操作的“code”参数的值。</param>
            /// <param name="roleId">此操作的“roleId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemRoleDomainService/HasRoleCodeUsedDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemRoleDomainService/HasRoleCodeUsed", ReplyAction="http://tempuri.org/SystemRoleDomainService/HasRoleCodeUsedResponse")]
            IAsyncResult BeginHasRoleCodeUsed(string code, int roleId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginHasRoleCodeUsed”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginHasRoleCodeUsed”返回的 IAsyncResult。</param>
            /// <returns>从“HasRoleCodeUsed”操作返回的“Boolean”。</returns>
            bool EndHasRoleCodeUsed(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“SearchRole”操作。
            /// </summary>
            /// <param name="searchKey">此操作的“searchKey”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemRoleDomainService/SearchRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemRoleDomainService/SearchRole", ReplyAction="http://tempuri.org/SystemRoleDomainService/SearchRoleResponse")]
            IAsyncResult BeginSearchRole(string searchKey, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginSearchRole”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginSearchRole”返回的 IAsyncResult。</param>
            /// <returns>从“SearchRole”操作返回的“List`1”。</returns>
            List<SystemRole> EndSearchRole(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“UpdateRole”操作。
            /// </summary>
            /// <param name="roleInfo">此操作的“roleInfo”参数的值。</param>
            /// <param name="modules">此操作的“modules”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemRoleDomainService/UpdateRoleDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemRoleDomainService/UpdateRole", ReplyAction="http://tempuri.org/SystemRoleDomainService/UpdateRoleResponse")]
            IAsyncResult BeginUpdateRole(SystemRole roleInfo, List<RoleModuleRel> modules, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginUpdateRole”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginUpdateRole”返回的 IAsyncResult。</param>
            /// <returns>从“UpdateRole”操作返回的“Int32”。</returns>
            int EndUpdateRole(IAsyncResult result);
        }
        
        internal sealed class SystemRoleDomainContextEntityContainer : EntityContainer
        {
            
            public SystemRoleDomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// 与“SystemUserDomainService”DomainService 相对应的 DomainContext。
    /// </summary>
    public sealed partial class SystemUserDomainContext : DomainContext
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="SystemUserDomainContext"/> 类的新实例。
        /// </summary>
        public SystemUserDomainContext() : 
                this(new WebDomainClient<ISystemUserDomainServiceContract>(new Uri("DocumentManageService-Web-SystemUserDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// 用指定的服务 URI 初始化 <see cref="SystemUserDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="serviceUri">SystemUserDomainService 服务 URI。</param>
        public SystemUserDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ISystemUserDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// 用指定的 <paramref name="domainClient"/> 初始化 <see cref="SystemUserDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="domainClient">要用于此 DomainContext 的 DomainClient 实例。</param>
        public SystemUserDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CreateUser”方法。
        /// </summary>
        /// <param name="user">此操作的“user”参数的值。</param>
        /// <param name="roles">此操作的“roles”参数的值。</param>
        /// <param name="orgs">此操作的“orgs”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> CreateUser(SystemUser user, List<UserRoleRel> roles, List<UserOrgRel> orgs, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("roles", roles);
            parameters.Add("orgs", orgs);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("CreateUser", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CreateUser”方法。
        /// </summary>
        /// <param name="user">此操作的“user”参数的值。</param>
        /// <param name="roles">此操作的“roles”参数的值。</param>
        /// <param name="orgs">此操作的“orgs”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> CreateUser(SystemUser user, List<UserRoleRel> roles, List<UserOrgRel> orgs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("roles", roles);
            parameters.Add("orgs", orgs);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("CreateUser", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DeleteUser”方法。
        /// </summary>
        /// <param name="user">此操作的“user”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> DeleteUser(SystemUser user, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            this.ValidateMethod("DeleteUser", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("DeleteUser", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DeleteUser”方法。
        /// </summary>
        /// <param name="user">此操作的“user”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> DeleteUser(SystemUser user)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            this.ValidateMethod("DeleteUser", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("DeleteUser", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUser”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<SystemUser> GetUser(int userId, Action<InvokeOperation<SystemUser>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("GetUser", parameters);
            return ((InvokeOperation<SystemUser>)(this.InvokeOperation("GetUser", typeof(SystemUser), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUser”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<SystemUser> GetUser(int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("GetUser", parameters);
            return ((InvokeOperation<SystemUser>)(this.InvokeOperation("GetUser", typeof(SystemUser), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUserCount”方法。
        /// </summary>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> GetUserCount(Action<InvokeOperation<int>> callback, object userState)
        {
            this.ValidateMethod("GetUserCount", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetUserCount", typeof(int), null, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUserCount”方法。
        /// </summary>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> GetUserCount()
        {
            this.ValidateMethod("GetUserCount", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetUserCount", typeof(int), null, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUserOrgRel”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<UserOrgRel>> GetUserOrgRel(int userId, Action<InvokeOperation<List<UserOrgRel>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("GetUserOrgRel", parameters);
            return ((InvokeOperation<List<UserOrgRel>>)(this.InvokeOperation("GetUserOrgRel", typeof(List<UserOrgRel>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUserOrgRel”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<UserOrgRel>> GetUserOrgRel(int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("GetUserOrgRel", parameters);
            return ((InvokeOperation<List<UserOrgRel>>)(this.InvokeOperation("GetUserOrgRel", typeof(List<UserOrgRel>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUserRoleRel”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<UserRoleRel>> GetUserRoleRel(int userId, Action<InvokeOperation<List<UserRoleRel>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("GetUserRoleRel", parameters);
            return ((InvokeOperation<List<UserRoleRel>>)(this.InvokeOperation("GetUserRoleRel", typeof(List<UserRoleRel>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUserRoleRel”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<UserRoleRel>> GetUserRoleRel(int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            this.ValidateMethod("GetUserRoleRel", parameters);
            return ((InvokeOperation<List<UserRoleRel>>)(this.InvokeOperation("GetUserRoleRel", typeof(List<UserRoleRel>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUsersByPage”方法。
        /// </summary>
        /// <param name="pageSize">此操作的“pageSize”参数的值。</param>
        /// <param name="pageIndex">此操作的“pageIndex”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemUser>> GetUsersByPage(int pageSize, int pageIndex, Action<InvokeOperation<List<SystemUser>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("pageSize", pageSize);
            parameters.Add("pageIndex", pageIndex);
            this.ValidateMethod("GetUsersByPage", parameters);
            return ((InvokeOperation<List<SystemUser>>)(this.InvokeOperation("GetUsersByPage", typeof(List<SystemUser>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetUsersByPage”方法。
        /// </summary>
        /// <param name="pageSize">此操作的“pageSize”参数的值。</param>
        /// <param name="pageIndex">此操作的“pageIndex”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemUser>> GetUsersByPage(int pageSize, int pageIndex)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("pageSize", pageSize);
            parameters.Add("pageIndex", pageIndex);
            this.ValidateMethod("GetUsersByPage", parameters);
            return ((InvokeOperation<List<SystemUser>>)(this.InvokeOperation("GetUsersByPage", typeof(List<SystemUser>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“HasUserNameUsed”方法。
        /// </summary>
        /// <param name="userName">此操作的“userName”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<bool> HasUserNameUsed(string userName, int userId, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("userId", userId);
            this.ValidateMethod("HasUserNameUsed", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("HasUserNameUsed", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“HasUserNameUsed”方法。
        /// </summary>
        /// <param name="userName">此操作的“userName”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<bool> HasUserNameUsed(string userName, int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("userId", userId);
            this.ValidateMethod("HasUserNameUsed", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("HasUserNameUsed", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“Login”方法。
        /// </summary>
        /// <param name="userName">此操作的“userName”参数的值。</param>
        /// <param name="password">此操作的“password”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<SystemUser> Login(string userName, string password, Action<InvokeOperation<SystemUser>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            this.ValidateMethod("Login", parameters);
            return ((InvokeOperation<SystemUser>)(this.InvokeOperation("Login", typeof(SystemUser), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“Login”方法。
        /// </summary>
        /// <param name="userName">此操作的“userName”参数的值。</param>
        /// <param name="password">此操作的“password”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<SystemUser> Login(string userName, string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            this.ValidateMethod("Login", parameters);
            return ((InvokeOperation<SystemUser>)(this.InvokeOperation("Login", typeof(SystemUser), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“SearchUser”方法。
        /// </summary>
        /// <param name="searchKey">此操作的“searchKey”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemUser>> SearchUser(string searchKey, Action<InvokeOperation<List<SystemUser>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("searchKey", searchKey);
            this.ValidateMethod("SearchUser", parameters);
            return ((InvokeOperation<List<SystemUser>>)(this.InvokeOperation("SearchUser", typeof(List<SystemUser>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“SearchUser”方法。
        /// </summary>
        /// <param name="searchKey">此操作的“searchKey”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<SystemUser>> SearchUser(string searchKey)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("searchKey", searchKey);
            this.ValidateMethod("SearchUser", parameters);
            return ((InvokeOperation<List<SystemUser>>)(this.InvokeOperation("SearchUser", typeof(List<SystemUser>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“UpdateUser”方法。
        /// </summary>
        /// <param name="user">此操作的“user”参数的值。</param>
        /// <param name="roles">此操作的“roles”参数的值。</param>
        /// <param name="orgs">此操作的“orgs”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> UpdateUser(SystemUser user, List<UserRoleRel> roles, List<UserOrgRel> orgs, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("roles", roles);
            parameters.Add("orgs", orgs);
            this.ValidateMethod("UpdateUser", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("UpdateUser", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“UpdateUser”方法。
        /// </summary>
        /// <param name="user">此操作的“user”参数的值。</param>
        /// <param name="roles">此操作的“roles”参数的值。</param>
        /// <param name="orgs">此操作的“orgs”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> UpdateUser(SystemUser user, List<UserRoleRel> roles, List<UserOrgRel> orgs)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("roles", roles);
            parameters.Add("orgs", orgs);
            this.ValidateMethod("UpdateUser", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("UpdateUser", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 为此 DomainContext 的 EntitySets 创建一个新 EntityContainer。
        /// </summary>
        /// <returns>一个新容器实例。</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SystemUserDomainContextEntityContainer();
        }
        
        /// <summary>
        /// 用于“SystemUserDomainService”DomainService 的 Service 协定。　
        /// </summary>
        [ServiceContract()]
        public interface ISystemUserDomainServiceContract
        {
            
            /// <summary>
            /// 异步调用“CreateUser”操作。
            /// </summary>
            /// <param name="user">此操作的“user”参数的值。</param>
            /// <param name="roles">此操作的“roles”参数的值。</param>
            /// <param name="orgs">此操作的“orgs”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/CreateUser", ReplyAction="http://tempuri.org/SystemUserDomainService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(SystemUser user, List<UserRoleRel> roles, List<UserOrgRel> orgs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginCreateUser”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginCreateUser”返回的 IAsyncResult。</param>
            /// <returns>从“CreateUser”操作返回的“Int32”。</returns>
            int EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“DeleteUser”操作。
            /// </summary>
            /// <param name="user">此操作的“user”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/DeleteUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/DeleteUser", ReplyAction="http://tempuri.org/SystemUserDomainService/DeleteUserResponse")]
            IAsyncResult BeginDeleteUser(SystemUser user, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginDeleteUser”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginDeleteUser”返回的 IAsyncResult。</param>
            /// <returns>从“DeleteUser”操作返回的“Int32”。</returns>
            int EndDeleteUser(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUser”操作。
            /// </summary>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/GetUser", ReplyAction="http://tempuri.org/SystemUserDomainService/GetUserResponse")]
            IAsyncResult BeginGetUser(int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUser”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUser”返回的 IAsyncResult。</param>
            /// <returns>从“GetUser”操作返回的“SystemUser”。</returns>
            SystemUser EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUserCount”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/GetUserCountDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/GetUserCount", ReplyAction="http://tempuri.org/SystemUserDomainService/GetUserCountResponse")]
            IAsyncResult BeginGetUserCount(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUserCount”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUserCount”返回的 IAsyncResult。</param>
            /// <returns>从“GetUserCount”操作返回的“Int32”。</returns>
            int EndGetUserCount(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUserOrgRel”操作。
            /// </summary>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/GetUserOrgRelDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/GetUserOrgRel", ReplyAction="http://tempuri.org/SystemUserDomainService/GetUserOrgRelResponse")]
            IAsyncResult BeginGetUserOrgRel(int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUserOrgRel”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUserOrgRel”返回的 IAsyncResult。</param>
            /// <returns>从“GetUserOrgRel”操作返回的“List`1”。</returns>
            List<UserOrgRel> EndGetUserOrgRel(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUserRoleRel”操作。
            /// </summary>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/GetUserRoleRelDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/GetUserRoleRel", ReplyAction="http://tempuri.org/SystemUserDomainService/GetUserRoleRelResponse")]
            IAsyncResult BeginGetUserRoleRel(int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUserRoleRel”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUserRoleRel”返回的 IAsyncResult。</param>
            /// <returns>从“GetUserRoleRel”操作返回的“List`1”。</returns>
            List<UserRoleRel> EndGetUserRoleRel(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetUsersByPage”操作。
            /// </summary>
            /// <param name="pageSize">此操作的“pageSize”参数的值。</param>
            /// <param name="pageIndex">此操作的“pageIndex”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/GetUsersByPageDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/GetUsersByPage", ReplyAction="http://tempuri.org/SystemUserDomainService/GetUsersByPageResponse")]
            IAsyncResult BeginGetUsersByPage(int pageSize, int pageIndex, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetUsersByPage”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetUsersByPage”返回的 IAsyncResult。</param>
            /// <returns>从“GetUsersByPage”操作返回的“List`1”。</returns>
            List<SystemUser> EndGetUsersByPage(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“HasUserNameUsed”操作。
            /// </summary>
            /// <param name="userName">此操作的“userName”参数的值。</param>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/HasUserNameUsedDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/HasUserNameUsed", ReplyAction="http://tempuri.org/SystemUserDomainService/HasUserNameUsedResponse")]
            IAsyncResult BeginHasUserNameUsed(string userName, int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginHasUserNameUsed”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginHasUserNameUsed”返回的 IAsyncResult。</param>
            /// <returns>从“HasUserNameUsed”操作返回的“Boolean”。</returns>
            bool EndHasUserNameUsed(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“Login”操作。
            /// </summary>
            /// <param name="userName">此操作的“userName”参数的值。</param>
            /// <param name="password">此操作的“password”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/Login", ReplyAction="http://tempuri.org/SystemUserDomainService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginLogin”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginLogin”返回的 IAsyncResult。</param>
            /// <returns>从“Login”操作返回的“SystemUser”。</returns>
            SystemUser EndLogin(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“SearchUser”操作。
            /// </summary>
            /// <param name="searchKey">此操作的“searchKey”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/SearchUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/SearchUser", ReplyAction="http://tempuri.org/SystemUserDomainService/SearchUserResponse")]
            IAsyncResult BeginSearchUser(string searchKey, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginSearchUser”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginSearchUser”返回的 IAsyncResult。</param>
            /// <returns>从“SearchUser”操作返回的“List`1”。</returns>
            List<SystemUser> EndSearchUser(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“UpdateUser”操作。
            /// </summary>
            /// <param name="user">此操作的“user”参数的值。</param>
            /// <param name="roles">此操作的“roles”参数的值。</param>
            /// <param name="orgs">此操作的“orgs”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/UpdateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/UpdateUser", ReplyAction="http://tempuri.org/SystemUserDomainService/UpdateUserResponse")]
            IAsyncResult BeginUpdateUser(SystemUser user, List<UserRoleRel> roles, List<UserOrgRel> orgs, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginUpdateUser”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginUpdateUser”返回的 IAsyncResult。</param>
            /// <returns>从“UpdateUser”操作返回的“Int32”。</returns>
            int EndUpdateUser(IAsyncResult result);
        }
        
        internal sealed class SystemUserDomainContextEntityContainer : EntityContainer
        {
            
            public SystemUserDomainContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// 与“WorkflowDomainService”DomainService 相对应的 DomainContext。
    /// </summary>
    public sealed partial class WorkflowDomainContext : DomainContext
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="WorkflowDomainContext"/> 类的新实例。
        /// </summary>
        public WorkflowDomainContext() : 
                this(new WebDomainClient<IWorkflowDomainServiceContract>(new Uri("DocumentManageService-Web-WorkflowDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// 用指定的服务 URI 初始化 <see cref="WorkflowDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="serviceUri">WorkflowDomainService 服务 URI。</param>
        public WorkflowDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IWorkflowDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// 用指定的 <paramref name="domainClient"/> 初始化 <see cref="WorkflowDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="domainClient">要用于此 DomainContext 的 DomainClient 实例。</param>
        public WorkflowDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“AuditArchiveWorkflow”方法。
        /// </summary>
        /// <param name="auditRecord">此操作的“auditRecord”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> AuditArchiveWorkflow(FlowAuditRecord auditRecord, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("auditRecord", auditRecord);
            this.ValidateMethod("AuditArchiveWorkflow", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("AuditArchiveWorkflow", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“AuditArchiveWorkflow”方法。
        /// </summary>
        /// <param name="auditRecord">此操作的“auditRecord”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> AuditArchiveWorkflow(FlowAuditRecord auditRecord)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("auditRecord", auditRecord);
            this.ValidateMethod("AuditArchiveWorkflow", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("AuditArchiveWorkflow", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CanUserAuditWorkflow”方法。
        /// </summary>
        /// <param name="flowId">此操作的“flowId”参数的值。</param>
        /// <param name="status">此操作的“status”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<bool> CanUserAuditWorkflow(int flowId, AuditStatus status, int userId, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flowId", flowId);
            parameters.Add("status", status);
            parameters.Add("userId", userId);
            this.ValidateMethod("CanUserAuditWorkflow", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("CanUserAuditWorkflow", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CanUserAuditWorkflow”方法。
        /// </summary>
        /// <param name="flowId">此操作的“flowId”参数的值。</param>
        /// <param name="status">此操作的“status”参数的值。</param>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<bool> CanUserAuditWorkflow(int flowId, AuditStatus status, int userId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flowId", flowId);
            parameters.Add("status", status);
            parameters.Add("userId", userId);
            this.ValidateMethod("CanUserAuditWorkflow", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("CanUserAuditWorkflow", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CreateWorkflow”方法。
        /// </summary>
        /// <param name="flow">此操作的“flow”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> CreateWorkflow(WorkflowInfo flow, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flow", flow);
            this.ValidateMethod("CreateWorkflow", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("CreateWorkflow", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“CreateWorkflow”方法。
        /// </summary>
        /// <param name="flow">此操作的“flow”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> CreateWorkflow(WorkflowInfo flow)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flow", flow);
            this.ValidateMethod("CreateWorkflow", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("CreateWorkflow", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DeleteArchiveWorkFlow”方法。
        /// </summary>
        /// <param name="flowId">此操作的“flowId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> DeleteArchiveWorkFlow(int flowId, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flowId", flowId);
            this.ValidateMethod("DeleteArchiveWorkFlow", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("DeleteArchiveWorkFlow", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DeleteArchiveWorkFlow”方法。
        /// </summary>
        /// <param name="flowId">此操作的“flowId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> DeleteArchiveWorkFlow(int flowId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flowId", flowId);
            this.ValidateMethod("DeleteArchiveWorkFlow", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("DeleteArchiveWorkFlow", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DeleteWorkflow”方法。
        /// </summary>
        /// <param name="flow">此操作的“flow”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> DeleteWorkflow(WorkflowInfo flow, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flow", flow);
            this.ValidateMethod("DeleteWorkflow", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("DeleteWorkflow", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“DeleteWorkflow”方法。
        /// </summary>
        /// <param name="flow">此操作的“flow”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> DeleteWorkflow(WorkflowInfo flow)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flow", flow);
            this.ValidateMethod("DeleteWorkflow", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("DeleteWorkflow", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetAllWorkflows”方法。
        /// </summary>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<WorkflowInfo>> GetAllWorkflows(Action<InvokeOperation<List<WorkflowInfo>>> callback, object userState)
        {
            this.ValidateMethod("GetAllWorkflows", null);
            return ((InvokeOperation<List<WorkflowInfo>>)(this.InvokeOperation("GetAllWorkflows", typeof(List<WorkflowInfo>), null, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetAllWorkflows”方法。
        /// </summary>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<WorkflowInfo>> GetAllWorkflows()
        {
            this.ValidateMethod("GetAllWorkflows", null);
            return ((InvokeOperation<List<WorkflowInfo>>)(this.InvokeOperation("GetAllWorkflows", typeof(List<WorkflowInfo>), null, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetArchiveFlowByUser”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="status">此操作的“status”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<ArchiveWorkflow>> GetArchiveFlowByUser(int userId, AuditStatus status, Action<InvokeOperation<List<ArchiveWorkflow>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            parameters.Add("status", status);
            this.ValidateMethod("GetArchiveFlowByUser", parameters);
            return ((InvokeOperation<List<ArchiveWorkflow>>)(this.InvokeOperation("GetArchiveFlowByUser", typeof(List<ArchiveWorkflow>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetArchiveFlowByUser”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="status">此操作的“status”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<ArchiveWorkflow>> GetArchiveFlowByUser(int userId, AuditStatus status)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            parameters.Add("status", status);
            this.ValidateMethod("GetArchiveFlowByUser", parameters);
            return ((InvokeOperation<List<ArchiveWorkflow>>)(this.InvokeOperation("GetArchiveFlowByUser", typeof(List<ArchiveWorkflow>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetArchiveWorkflow”方法。
        /// </summary>
        /// <param name="flowId">此操作的“flowId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<ArchiveWorkflow> GetArchiveWorkflow(int flowId, Action<InvokeOperation<ArchiveWorkflow>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flowId", flowId);
            this.ValidateMethod("GetArchiveWorkflow", parameters);
            return ((InvokeOperation<ArchiveWorkflow>)(this.InvokeOperation("GetArchiveWorkflow", typeof(ArchiveWorkflow), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetArchiveWorkflow”方法。
        /// </summary>
        /// <param name="flowId">此操作的“flowId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<ArchiveWorkflow> GetArchiveWorkflow(int flowId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flowId", flowId);
            this.ValidateMethod("GetArchiveWorkflow", parameters);
            return ((InvokeOperation<ArchiveWorkflow>)(this.InvokeOperation("GetArchiveWorkflow", typeof(ArchiveWorkflow), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetAuditFlowByUser”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="status">此操作的“status”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<ArchiveWorkflow>> GetAuditFlowByUser(int userId, AuditStatus status, Action<InvokeOperation<List<ArchiveWorkflow>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            parameters.Add("status", status);
            this.ValidateMethod("GetAuditFlowByUser", parameters);
            return ((InvokeOperation<List<ArchiveWorkflow>>)(this.InvokeOperation("GetAuditFlowByUser", typeof(List<ArchiveWorkflow>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetAuditFlowByUser”方法。
        /// </summary>
        /// <param name="userId">此操作的“userId”参数的值。</param>
        /// <param name="status">此操作的“status”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<ArchiveWorkflow>> GetAuditFlowByUser(int userId, AuditStatus status)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userId", userId);
            parameters.Add("status", status);
            this.ValidateMethod("GetAuditFlowByUser", parameters);
            return ((InvokeOperation<List<ArchiveWorkflow>>)(this.InvokeOperation("GetAuditFlowByUser", typeof(List<ArchiveWorkflow>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetFlowAuditRecords”方法。
        /// </summary>
        /// <param name="flowId">此操作的“flowId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FlowAuditRecord>> GetFlowAuditRecords(int flowId, Action<InvokeOperation<List<FlowAuditRecord>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flowId", flowId);
            this.ValidateMethod("GetFlowAuditRecords", parameters);
            return ((InvokeOperation<List<FlowAuditRecord>>)(this.InvokeOperation("GetFlowAuditRecords", typeof(List<FlowAuditRecord>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetFlowAuditRecords”方法。
        /// </summary>
        /// <param name="flowId">此操作的“flowId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<FlowAuditRecord>> GetFlowAuditRecords(int flowId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flowId", flowId);
            this.ValidateMethod("GetFlowAuditRecords", parameters);
            return ((InvokeOperation<List<FlowAuditRecord>>)(this.InvokeOperation("GetFlowAuditRecords", typeof(List<FlowAuditRecord>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetStepJointCheckupUsers”方法。
        /// </summary>
        /// <param name="stepId">此操作的“stepId”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<JointCheckupUser>> GetStepJointCheckupUsers(int stepId, Action<InvokeOperation<List<JointCheckupUser>>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("stepId", stepId);
            this.ValidateMethod("GetStepJointCheckupUsers", parameters);
            return ((InvokeOperation<List<JointCheckupUser>>)(this.InvokeOperation("GetStepJointCheckupUsers", typeof(List<JointCheckupUser>), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetStepJointCheckupUsers”方法。
        /// </summary>
        /// <param name="stepId">此操作的“stepId”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<List<JointCheckupUser>> GetStepJointCheckupUsers(int stepId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("stepId", stepId);
            this.ValidateMethod("GetStepJointCheckupUsers", parameters);
            return ((InvokeOperation<List<JointCheckupUser>>)(this.InvokeOperation("GetStepJointCheckupUsers", typeof(List<JointCheckupUser>), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetWorkflowInfo”方法。
        /// </summary>
        /// <param name="flowType">此操作的“flowType”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<WorkflowInfo> GetWorkflowInfo(int flowType, Action<InvokeOperation<WorkflowInfo>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flowType", flowType);
            this.ValidateMethod("GetWorkflowInfo", parameters);
            return ((InvokeOperation<WorkflowInfo>)(this.InvokeOperation("GetWorkflowInfo", typeof(WorkflowInfo), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“GetWorkflowInfo”方法。
        /// </summary>
        /// <param name="flowType">此操作的“flowType”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<WorkflowInfo> GetWorkflowInfo(int flowType)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flowType", flowType);
            this.ValidateMethod("GetWorkflowInfo", parameters);
            return ((InvokeOperation<WorkflowInfo>)(this.InvokeOperation("GetWorkflowInfo", typeof(WorkflowInfo), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“SaveWorkflow”方法。
        /// </summary>
        /// <param name="flow">此操作的“flow”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<ArchiveWorkflow> SaveWorkflow(ArchiveWorkflow flow, Action<InvokeOperation<ArchiveWorkflow>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flow", flow);
            this.ValidateMethod("SaveWorkflow", parameters);
            return ((InvokeOperation<ArchiveWorkflow>)(this.InvokeOperation("SaveWorkflow", typeof(ArchiveWorkflow), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“SaveWorkflow”方法。
        /// </summary>
        /// <param name="flow">此操作的“flow”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<ArchiveWorkflow> SaveWorkflow(ArchiveWorkflow flow)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flow", flow);
            this.ValidateMethod("SaveWorkflow", parameters);
            return ((InvokeOperation<ArchiveWorkflow>)(this.InvokeOperation("SaveWorkflow", typeof(ArchiveWorkflow), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“UpdateWorkflow”方法。
        /// </summary>
        /// <param name="flow">此操作的“flow”参数的值。</param>
        /// <param name="callback">要在操作完成时调用的回调。</param>
        /// <param name="userState">要传递给回调的值。该值可为 <c>null</c>。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> UpdateWorkflow(WorkflowInfo flow, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flow", flow);
            this.ValidateMethod("UpdateWorkflow", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("UpdateWorkflow", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// 异步调用 DomainService 的“UpdateWorkflow”方法。
        /// </summary>
        /// <param name="flow">此操作的“flow”参数的值。</param>
        /// <returns>可用于管理异步请求的操作实例。</returns>
        public InvokeOperation<int> UpdateWorkflow(WorkflowInfo flow)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("flow", flow);
            this.ValidateMethod("UpdateWorkflow", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("UpdateWorkflow", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// 为此 DomainContext 的 EntitySets 创建一个新 EntityContainer。
        /// </summary>
        /// <returns>一个新容器实例。</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new WorkflowDomainContextEntityContainer();
        }
        
        /// <summary>
        /// 用于“WorkflowDomainService”DomainService 的 Service 协定。　
        /// </summary>
        [ServiceContract()]
        public interface IWorkflowDomainServiceContract
        {
            
            /// <summary>
            /// 异步调用“AuditArchiveWorkflow”操作。
            /// </summary>
            /// <param name="auditRecord">此操作的“auditRecord”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WorkflowDomainService/AuditArchiveWorkflowDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WorkflowDomainService/AuditArchiveWorkflow", ReplyAction="http://tempuri.org/WorkflowDomainService/AuditArchiveWorkflowResponse")]
            IAsyncResult BeginAuditArchiveWorkflow(FlowAuditRecord auditRecord, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginAuditArchiveWorkflow”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginAuditArchiveWorkflow”返回的 IAsyncResult。</param>
            /// <returns>从“AuditArchiveWorkflow”操作返回的“Int32”。</returns>
            int EndAuditArchiveWorkflow(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“CanUserAuditWorkflow”操作。
            /// </summary>
            /// <param name="flowId">此操作的“flowId”参数的值。</param>
            /// <param name="status">此操作的“status”参数的值。</param>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WorkflowDomainService/CanUserAuditWorkflowDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WorkflowDomainService/CanUserAuditWorkflow", ReplyAction="http://tempuri.org/WorkflowDomainService/CanUserAuditWorkflowResponse")]
            IAsyncResult BeginCanUserAuditWorkflow(int flowId, AuditStatus status, int userId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginCanUserAuditWorkflow”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginCanUserAuditWorkflow”返回的 IAsyncResult。</param>
            /// <returns>从“CanUserAuditWorkflow”操作返回的“Boolean”。</returns>
            bool EndCanUserAuditWorkflow(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“CreateWorkflow”操作。
            /// </summary>
            /// <param name="flow">此操作的“flow”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WorkflowDomainService/CreateWorkflowDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WorkflowDomainService/CreateWorkflow", ReplyAction="http://tempuri.org/WorkflowDomainService/CreateWorkflowResponse")]
            IAsyncResult BeginCreateWorkflow(WorkflowInfo flow, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginCreateWorkflow”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginCreateWorkflow”返回的 IAsyncResult。</param>
            /// <returns>从“CreateWorkflow”操作返回的“Int32”。</returns>
            int EndCreateWorkflow(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“DeleteArchiveWorkFlow”操作。
            /// </summary>
            /// <param name="flowId">此操作的“flowId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WorkflowDomainService/DeleteArchiveWorkFlowDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WorkflowDomainService/DeleteArchiveWorkFlow", ReplyAction="http://tempuri.org/WorkflowDomainService/DeleteArchiveWorkFlowResponse")]
            IAsyncResult BeginDeleteArchiveWorkFlow(int flowId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginDeleteArchiveWorkFlow”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginDeleteArchiveWorkFlow”返回的 IAsyncResult。</param>
            /// <returns>从“DeleteArchiveWorkFlow”操作返回的“Int32”。</returns>
            int EndDeleteArchiveWorkFlow(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“DeleteWorkflow”操作。
            /// </summary>
            /// <param name="flow">此操作的“flow”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WorkflowDomainService/DeleteWorkflowDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WorkflowDomainService/DeleteWorkflow", ReplyAction="http://tempuri.org/WorkflowDomainService/DeleteWorkflowResponse")]
            IAsyncResult BeginDeleteWorkflow(WorkflowInfo flow, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginDeleteWorkflow”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginDeleteWorkflow”返回的 IAsyncResult。</param>
            /// <returns>从“DeleteWorkflow”操作返回的“Int32”。</returns>
            int EndDeleteWorkflow(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetAllWorkflows”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WorkflowDomainService/GetAllWorkflowsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WorkflowDomainService/GetAllWorkflows", ReplyAction="http://tempuri.org/WorkflowDomainService/GetAllWorkflowsResponse")]
            IAsyncResult BeginGetAllWorkflows(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetAllWorkflows”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetAllWorkflows”返回的 IAsyncResult。</param>
            /// <returns>从“GetAllWorkflows”操作返回的“List`1”。</returns>
            List<WorkflowInfo> EndGetAllWorkflows(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetArchiveFlowByUser”操作。
            /// </summary>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="status">此操作的“status”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WorkflowDomainService/GetArchiveFlowByUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WorkflowDomainService/GetArchiveFlowByUser", ReplyAction="http://tempuri.org/WorkflowDomainService/GetArchiveFlowByUserResponse")]
            IAsyncResult BeginGetArchiveFlowByUser(int userId, AuditStatus status, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetArchiveFlowByUser”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetArchiveFlowByUser”返回的 IAsyncResult。</param>
            /// <returns>从“GetArchiveFlowByUser”操作返回的“List`1”。</returns>
            List<ArchiveWorkflow> EndGetArchiveFlowByUser(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetArchiveWorkflow”操作。
            /// </summary>
            /// <param name="flowId">此操作的“flowId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WorkflowDomainService/GetArchiveWorkflowDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WorkflowDomainService/GetArchiveWorkflow", ReplyAction="http://tempuri.org/WorkflowDomainService/GetArchiveWorkflowResponse")]
            IAsyncResult BeginGetArchiveWorkflow(int flowId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetArchiveWorkflow”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetArchiveWorkflow”返回的 IAsyncResult。</param>
            /// <returns>从“GetArchiveWorkflow”操作返回的“ArchiveWorkflow”。</returns>
            ArchiveWorkflow EndGetArchiveWorkflow(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetAuditFlowByUser”操作。
            /// </summary>
            /// <param name="userId">此操作的“userId”参数的值。</param>
            /// <param name="status">此操作的“status”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WorkflowDomainService/GetAuditFlowByUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WorkflowDomainService/GetAuditFlowByUser", ReplyAction="http://tempuri.org/WorkflowDomainService/GetAuditFlowByUserResponse")]
            IAsyncResult BeginGetAuditFlowByUser(int userId, AuditStatus status, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetAuditFlowByUser”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetAuditFlowByUser”返回的 IAsyncResult。</param>
            /// <returns>从“GetAuditFlowByUser”操作返回的“List`1”。</returns>
            List<ArchiveWorkflow> EndGetAuditFlowByUser(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetFlowAuditRecords”操作。
            /// </summary>
            /// <param name="flowId">此操作的“flowId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WorkflowDomainService/GetFlowAuditRecordsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WorkflowDomainService/GetFlowAuditRecords", ReplyAction="http://tempuri.org/WorkflowDomainService/GetFlowAuditRecordsResponse")]
            IAsyncResult BeginGetFlowAuditRecords(int flowId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetFlowAuditRecords”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetFlowAuditRecords”返回的 IAsyncResult。</param>
            /// <returns>从“GetFlowAuditRecords”操作返回的“List`1”。</returns>
            List<FlowAuditRecord> EndGetFlowAuditRecords(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetStepJointCheckupUsers”操作。
            /// </summary>
            /// <param name="stepId">此操作的“stepId”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WorkflowDomainService/GetStepJointCheckupUsersDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WorkflowDomainService/GetStepJointCheckupUsers", ReplyAction="http://tempuri.org/WorkflowDomainService/GetStepJointCheckupUsersResponse")]
            IAsyncResult BeginGetStepJointCheckupUsers(int stepId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetStepJointCheckupUsers”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetStepJointCheckupUsers”返回的 IAsyncResult。</param>
            /// <returns>从“GetStepJointCheckupUsers”操作返回的“List`1”。</returns>
            List<JointCheckupUser> EndGetStepJointCheckupUsers(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetWorkflowInfo”操作。
            /// </summary>
            /// <param name="flowType">此操作的“flowType”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WorkflowDomainService/GetWorkflowInfoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WorkflowDomainService/GetWorkflowInfo", ReplyAction="http://tempuri.org/WorkflowDomainService/GetWorkflowInfoResponse")]
            IAsyncResult BeginGetWorkflowInfo(int flowType, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetWorkflowInfo”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetWorkflowInfo”返回的 IAsyncResult。</param>
            /// <returns>从“GetWorkflowInfo”操作返回的“WorkflowInfo”。</returns>
            WorkflowInfo EndGetWorkflowInfo(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“SaveWorkflow”操作。
            /// </summary>
            /// <param name="flow">此操作的“flow”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WorkflowDomainService/SaveWorkflowDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WorkflowDomainService/SaveWorkflow", ReplyAction="http://tempuri.org/WorkflowDomainService/SaveWorkflowResponse")]
            IAsyncResult BeginSaveWorkflow(ArchiveWorkflow flow, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginSaveWorkflow”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginSaveWorkflow”返回的 IAsyncResult。</param>
            /// <returns>从“SaveWorkflow”操作返回的“ArchiveWorkflow”。</returns>
            ArchiveWorkflow EndSaveWorkflow(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“UpdateWorkflow”操作。
            /// </summary>
            /// <param name="flow">此操作的“flow”参数的值。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WorkflowDomainService/UpdateWorkflowDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WorkflowDomainService/UpdateWorkflow", ReplyAction="http://tempuri.org/WorkflowDomainService/UpdateWorkflowResponse")]
            IAsyncResult BeginUpdateWorkflow(WorkflowInfo flow, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginUpdateWorkflow”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginUpdateWorkflow”返回的 IAsyncResult。</param>
            /// <returns>从“UpdateWorkflow”操作返回的“Int32”。</returns>
            int EndUpdateWorkflow(IAsyncResult result);
        }
        
        internal sealed class WorkflowDomainContextEntityContainer : EntityContainer
        {
            
            public WorkflowDomainContextEntityContainer()
            {
            }
        }
    }
}
